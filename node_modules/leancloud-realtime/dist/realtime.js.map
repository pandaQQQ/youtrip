{"version":3,"file":"realtime.js","sources":["../proto/message-compiled.js","../proto/message.js","../src/utils/global.js","../src/utils/expirable.js","../src/utils/cache.js","../src/utils/index.js","../src/websocket-plus.js","../src/error.js","../src/connection.js","../src/plugin.js","../src/realtime.js","../src/events/im.js","../src/messages/message.js","../src/messages/helpers.js","../src/messages/typed-message.js","../src/messages/recalled-message.js","../src/conversations/conversation-base.js","../src/conversation-member-info.js","../src/signature-factory-runner.js","../src/conversations/persistent-conversation.js","../src/conversations/conversation.js","../src/conversations/chat-room.js","../src/conversations/service-conversation.js","../src/conversations/temporary-conversation.js","../src/conversation-query.js","../src/session-manager.js","../src/im-client.js","../src/events/core.js","../src/messages/binary-message.js","../src/messages/text-message.js","../src/message-parser.js","../src/plugin-im.js","../src/index.js"],"sourcesContent":["module.exports = require(\"protobufjs/dist/protobuf-light\").newBuilder({})['import']({\n    \"package\": \"push_server.messages2\",\n    \"syntax\": \"proto2\",\n    \"options\": {\n        \"objc_class_prefix\": \"AVIM\"\n    },\n    \"messages\": [\n        {\n            \"name\": \"JsonObjectMessage\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"required\",\n                    \"type\": \"string\",\n                    \"name\": \"data\",\n                    \"id\": 1\n                }\n            ]\n        },\n        {\n            \"name\": \"UnreadTuple\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"required\",\n                    \"type\": \"string\",\n                    \"name\": \"cid\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"required\",\n                    \"type\": \"int32\",\n                    \"name\": \"unread\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"mid\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"timestamp\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"from\",\n                    \"id\": 5\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"data\",\n                    \"id\": 6\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"patchTimestamp\",\n                    \"id\": 7\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"mentioned\",\n                    \"id\": 8\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bytes\",\n                    \"name\": \"binaryMsg\",\n                    \"id\": 9\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"convType\",\n                    \"id\": 10\n                }\n            ]\n        },\n        {\n            \"name\": \"LogItem\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"from\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"data\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"timestamp\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"msgId\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"ackAt\",\n                    \"id\": 5\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"readAt\",\n                    \"id\": 6\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"patchTimestamp\",\n                    \"id\": 7\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"mentionAll\",\n                    \"id\": 8\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"mentionPids\",\n                    \"id\": 9\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"bin\",\n                    \"id\": 10\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"convType\",\n                    \"id\": 11\n                }\n            ]\n        },\n        {\n            \"name\": \"ConvMemberInfo\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"pid\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"role\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"infoId\",\n                    \"id\": 3\n                }\n            ]\n        },\n        {\n            \"name\": \"DataCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"ids\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"JsonObjectMessage\",\n                    \"name\": \"msg\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"offline\",\n                    \"id\": 3\n                }\n            ]\n        },\n        {\n            \"name\": \"SessionCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"t\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"n\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"s\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"ua\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"r\",\n                    \"id\": 5\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"tag\",\n                    \"id\": 6\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"deviceId\",\n                    \"id\": 7\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"sessionPeerIds\",\n                    \"id\": 8\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"onlineSessionPeerIds\",\n                    \"id\": 9\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"st\",\n                    \"id\": 10\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"stTtl\",\n                    \"id\": 11\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"code\",\n                    \"id\": 12\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"reason\",\n                    \"id\": 13\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"deviceToken\",\n                    \"id\": 14\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"sp\",\n                    \"id\": 15\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"detail\",\n                    \"id\": 16\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"lastUnreadNotifTime\",\n                    \"id\": 17\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"lastPatchTime\",\n                    \"id\": 18\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"configBitmap\",\n                    \"id\": 19\n                }\n            ]\n        },\n        {\n            \"name\": \"ErrorCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"required\",\n                    \"type\": \"int32\",\n                    \"name\": \"code\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"required\",\n                    \"type\": \"string\",\n                    \"name\": \"reason\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"appCode\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"detail\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"pids\",\n                    \"id\": 5\n                }\n            ]\n        },\n        {\n            \"name\": \"DirectCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"msg\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"uid\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"fromPeerId\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"timestamp\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"offline\",\n                    \"id\": 5\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"hasMore\",\n                    \"id\": 6\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"toPeerIds\",\n                    \"id\": 7\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"r\",\n                    \"id\": 10\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"cid\",\n                    \"id\": 11\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"id\",\n                    \"id\": 12\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"transient\",\n                    \"id\": 13\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"dt\",\n                    \"id\": 14\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"roomId\",\n                    \"id\": 15\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"pushData\",\n                    \"id\": 16\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"will\",\n                    \"id\": 17\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"patchTimestamp\",\n                    \"id\": 18\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bytes\",\n                    \"name\": \"binaryMsg\",\n                    \"id\": 19\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"mentionPids\",\n                    \"id\": 20\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"mentionAll\",\n                    \"id\": 21\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"convType\",\n                    \"id\": 22\n                }\n            ]\n        },\n        {\n            \"name\": \"AckCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"code\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"reason\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"mid\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"cid\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"t\",\n                    \"id\": 5\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"uid\",\n                    \"id\": 6\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"fromts\",\n                    \"id\": 7\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"tots\",\n                    \"id\": 8\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"type\",\n                    \"id\": 9\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"ids\",\n                    \"id\": 10\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"appCode\",\n                    \"id\": 11\n                }\n            ]\n        },\n        {\n            \"name\": \"UnreadCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"UnreadTuple\",\n                    \"name\": \"convs\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"notifTime\",\n                    \"id\": 2\n                }\n            ]\n        },\n        {\n            \"name\": \"ConvCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"m\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"transient\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"unique\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"cid\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"cdate\",\n                    \"id\": 5\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"initBy\",\n                    \"id\": 6\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"sort\",\n                    \"id\": 7\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"limit\",\n                    \"id\": 8\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"skip\",\n                    \"id\": 9\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"flag\",\n                    \"id\": 10\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"count\",\n                    \"id\": 11\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"udate\",\n                    \"id\": 12\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"t\",\n                    \"id\": 13\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"n\",\n                    \"id\": 14\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"s\",\n                    \"id\": 15\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"statusSub\",\n                    \"id\": 16\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"statusPub\",\n                    \"id\": 17\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"statusTTL\",\n                    \"id\": 18\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"uniqueId\",\n                    \"id\": 19\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"targetClientId\",\n                    \"id\": 20\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"maxReadTimestamp\",\n                    \"id\": 21\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"maxAckTimestamp\",\n                    \"id\": 22\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"queryAllMembers\",\n                    \"id\": 23\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"MaxReadTuple\",\n                    \"name\": \"maxReadTuples\",\n                    \"id\": 24\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"cids\",\n                    \"id\": 25\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"ConvMemberInfo\",\n                    \"name\": \"info\",\n                    \"id\": 26\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"tempConv\",\n                    \"id\": 27\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"tempConvTTL\",\n                    \"id\": 28\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"tempConvIds\",\n                    \"id\": 29\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"allowedPids\",\n                    \"id\": 30\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"ErrorCommand\",\n                    \"name\": \"failedPids\",\n                    \"id\": 31\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"next\",\n                    \"id\": 40\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"JsonObjectMessage\",\n                    \"name\": \"results\",\n                    \"id\": 100\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"JsonObjectMessage\",\n                    \"name\": \"where\",\n                    \"id\": 101\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"JsonObjectMessage\",\n                    \"name\": \"attr\",\n                    \"id\": 103\n                }\n            ]\n        },\n        {\n            \"name\": \"RoomCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"roomId\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"s\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"t\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"n\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"transient\",\n                    \"id\": 5\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"roomPeerIds\",\n                    \"id\": 6\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"byPeerId\",\n                    \"id\": 7\n                }\n            ]\n        },\n        {\n            \"name\": \"LogsCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"cid\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"l\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"limit\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"t\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"tt\",\n                    \"id\": 5\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"tmid\",\n                    \"id\": 6\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"mid\",\n                    \"id\": 7\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"checksum\",\n                    \"id\": 8\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"stored\",\n                    \"id\": 9\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"QueryDirection\",\n                    \"name\": \"direction\",\n                    \"id\": 10,\n                    \"options\": {\n                        \"default\": \"OLD\"\n                    }\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"tIncluded\",\n                    \"id\": 11\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"ttIncluded\",\n                    \"id\": 12\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"lctype\",\n                    \"id\": 13\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"LogItem\",\n                    \"name\": \"logs\",\n                    \"id\": 105\n                }\n            ],\n            \"enums\": [\n                {\n                    \"name\": \"QueryDirection\",\n                    \"syntax\": \"proto2\",\n                    \"values\": [\n                        {\n                            \"name\": \"OLD\",\n                            \"id\": 1\n                        },\n                        {\n                            \"name\": \"NEW\",\n                            \"id\": 2\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"name\": \"RcpCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"id\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"cid\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"t\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"read\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"from\",\n                    \"id\": 5\n                }\n            ]\n        },\n        {\n            \"name\": \"ReadTuple\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"required\",\n                    \"type\": \"string\",\n                    \"name\": \"cid\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"timestamp\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"mid\",\n                    \"id\": 3\n                }\n            ]\n        },\n        {\n            \"name\": \"MaxReadTuple\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"pid\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"maxAckTimestamp\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"maxReadTimestamp\",\n                    \"id\": 3\n                }\n            ]\n        },\n        {\n            \"name\": \"ReadCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"cid\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"cids\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"ReadTuple\",\n                    \"name\": \"convs\",\n                    \"id\": 3\n                }\n            ]\n        },\n        {\n            \"name\": \"PresenceCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"StatusType\",\n                    \"name\": \"status\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"sessionPeerIds\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"cid\",\n                    \"id\": 3\n                }\n            ]\n        },\n        {\n            \"name\": \"ReportCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"initiative\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"type\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"data\",\n                    \"id\": 3\n                }\n            ]\n        },\n        {\n            \"name\": \"PatchItem\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"cid\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"mid\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"timestamp\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"recall\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"data\",\n                    \"id\": 5\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"patchTimestamp\",\n                    \"id\": 6\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"from\",\n                    \"id\": 7\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bytes\",\n                    \"name\": \"binaryMsg\",\n                    \"id\": 8\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"mentionAll\",\n                    \"id\": 9\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"mentionPids\",\n                    \"id\": 10\n                }\n            ]\n        },\n        {\n            \"name\": \"PatchCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"PatchItem\",\n                    \"name\": \"patches\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"lastPatchTime\",\n                    \"id\": 2\n                }\n            ]\n        },\n        {\n            \"name\": \"PubsubCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"cid\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"cids\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"topic\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"subtopic\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"topics\",\n                    \"id\": 5\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"subtopics\",\n                    \"id\": 6\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"JsonObjectMessage\",\n                    \"name\": \"results\",\n                    \"id\": 7\n                }\n            ]\n        },\n        {\n            \"name\": \"BlacklistCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"srcCid\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"toPids\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"srcPid\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"toCids\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"limit\",\n                    \"id\": 5\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"next\",\n                    \"id\": 6\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"blockedPids\",\n                    \"id\": 8\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"blockedCids\",\n                    \"id\": 9\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"allowedPids\",\n                    \"id\": 10\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"ErrorCommand\",\n                    \"name\": \"failedPids\",\n                    \"id\": 11\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"t\",\n                    \"id\": 12\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"n\",\n                    \"id\": 13\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"s\",\n                    \"id\": 14\n                }\n            ]\n        },\n        {\n            \"name\": \"GenericCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"CommandType\",\n                    \"name\": \"cmd\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"OpType\",\n                    \"name\": \"op\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"appId\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"peerId\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"i\",\n                    \"id\": 5\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"installationId\",\n                    \"id\": 6\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"priority\",\n                    \"id\": 7\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"service\",\n                    \"id\": 8\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"serverTs\",\n                    \"id\": 9\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"DataCommand\",\n                    \"name\": \"dataMessage\",\n                    \"id\": 101\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"SessionCommand\",\n                    \"name\": \"sessionMessage\",\n                    \"id\": 102\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"ErrorCommand\",\n                    \"name\": \"errorMessage\",\n                    \"id\": 103\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"DirectCommand\",\n                    \"name\": \"directMessage\",\n                    \"id\": 104\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"AckCommand\",\n                    \"name\": \"ackMessage\",\n                    \"id\": 105\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"UnreadCommand\",\n                    \"name\": \"unreadMessage\",\n                    \"id\": 106\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"ReadCommand\",\n                    \"name\": \"readMessage\",\n                    \"id\": 107\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"RcpCommand\",\n                    \"name\": \"rcpMessage\",\n                    \"id\": 108\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"LogsCommand\",\n                    \"name\": \"logsMessage\",\n                    \"id\": 109\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"ConvCommand\",\n                    \"name\": \"convMessage\",\n                    \"id\": 110\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"RoomCommand\",\n                    \"name\": \"roomMessage\",\n                    \"id\": 111\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"PresenceCommand\",\n                    \"name\": \"presenceMessage\",\n                    \"id\": 112\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"ReportCommand\",\n                    \"name\": \"reportMessage\",\n                    \"id\": 113\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"PatchCommand\",\n                    \"name\": \"patchMessage\",\n                    \"id\": 114\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"PubsubCommand\",\n                    \"name\": \"pubsubMessage\",\n                    \"id\": 115\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"BlacklistCommand\",\n                    \"name\": \"blacklistMessage\",\n                    \"id\": 116\n                }\n            ]\n        }\n    ],\n    \"enums\": [\n        {\n            \"name\": \"CommandType\",\n            \"syntax\": \"proto2\",\n            \"values\": [\n                {\n                    \"name\": \"session\",\n                    \"id\": 0\n                },\n                {\n                    \"name\": \"conv\",\n                    \"id\": 1\n                },\n                {\n                    \"name\": \"direct\",\n                    \"id\": 2\n                },\n                {\n                    \"name\": \"ack\",\n                    \"id\": 3\n                },\n                {\n                    \"name\": \"rcp\",\n                    \"id\": 4\n                },\n                {\n                    \"name\": \"unread\",\n                    \"id\": 5\n                },\n                {\n                    \"name\": \"logs\",\n                    \"id\": 6\n                },\n                {\n                    \"name\": \"error\",\n                    \"id\": 7\n                },\n                {\n                    \"name\": \"login\",\n                    \"id\": 8\n                },\n                {\n                    \"name\": \"data\",\n                    \"id\": 9\n                },\n                {\n                    \"name\": \"room\",\n                    \"id\": 10\n                },\n                {\n                    \"name\": \"read\",\n                    \"id\": 11\n                },\n                {\n                    \"name\": \"presence\",\n                    \"id\": 12\n                },\n                {\n                    \"name\": \"report\",\n                    \"id\": 13\n                },\n                {\n                    \"name\": \"echo\",\n                    \"id\": 14\n                },\n                {\n                    \"name\": \"loggedin\",\n                    \"id\": 15\n                },\n                {\n                    \"name\": \"logout\",\n                    \"id\": 16\n                },\n                {\n                    \"name\": \"loggedout\",\n                    \"id\": 17\n                },\n                {\n                    \"name\": \"patch\",\n                    \"id\": 18\n                },\n                {\n                    \"name\": \"pubsub\",\n                    \"id\": 19\n                },\n                {\n                    \"name\": \"blacklist\",\n                    \"id\": 20\n                }\n            ]\n        },\n        {\n            \"name\": \"OpType\",\n            \"syntax\": \"proto2\",\n            \"values\": [\n                {\n                    \"name\": \"open\",\n                    \"id\": 1\n                },\n                {\n                    \"name\": \"add\",\n                    \"id\": 2\n                },\n                {\n                    \"name\": \"remove\",\n                    \"id\": 3\n                },\n                {\n                    \"name\": \"close\",\n                    \"id\": 4\n                },\n                {\n                    \"name\": \"opened\",\n                    \"id\": 5\n                },\n                {\n                    \"name\": \"closed\",\n                    \"id\": 6\n                },\n                {\n                    \"name\": \"query\",\n                    \"id\": 7\n                },\n                {\n                    \"name\": \"query_result\",\n                    \"id\": 8\n                },\n                {\n                    \"name\": \"conflict\",\n                    \"id\": 9\n                },\n                {\n                    \"name\": \"added\",\n                    \"id\": 10\n                },\n                {\n                    \"name\": \"removed\",\n                    \"id\": 11\n                },\n                {\n                    \"name\": \"refresh\",\n                    \"id\": 12\n                },\n                {\n                    \"name\": \"refreshed\",\n                    \"id\": 13\n                },\n                {\n                    \"name\": \"start\",\n                    \"id\": 30\n                },\n                {\n                    \"name\": \"started\",\n                    \"id\": 31\n                },\n                {\n                    \"name\": \"joined\",\n                    \"id\": 32\n                },\n                {\n                    \"name\": \"members_joined\",\n                    \"id\": 33\n                },\n                {\n                    \"name\": \"left\",\n                    \"id\": 39\n                },\n                {\n                    \"name\": \"members_left\",\n                    \"id\": 40\n                },\n                {\n                    \"name\": \"results\",\n                    \"id\": 42\n                },\n                {\n                    \"name\": \"count\",\n                    \"id\": 43\n                },\n                {\n                    \"name\": \"result\",\n                    \"id\": 44\n                },\n                {\n                    \"name\": \"update\",\n                    \"id\": 45\n                },\n                {\n                    \"name\": \"updated\",\n                    \"id\": 46\n                },\n                {\n                    \"name\": \"mute\",\n                    \"id\": 47\n                },\n                {\n                    \"name\": \"unmute\",\n                    \"id\": 48\n                },\n                {\n                    \"name\": \"status\",\n                    \"id\": 49\n                },\n                {\n                    \"name\": \"members\",\n                    \"id\": 50\n                },\n                {\n                    \"name\": \"max_read\",\n                    \"id\": 51\n                },\n                {\n                    \"name\": \"is_member\",\n                    \"id\": 52\n                },\n                {\n                    \"name\": \"member_info_update\",\n                    \"id\": 53\n                },\n                {\n                    \"name\": \"member_info_updated\",\n                    \"id\": 54\n                },\n                {\n                    \"name\": \"member_info_changed\",\n                    \"id\": 55\n                },\n                {\n                    \"name\": \"join\",\n                    \"id\": 80\n                },\n                {\n                    \"name\": \"invite\",\n                    \"id\": 81\n                },\n                {\n                    \"name\": \"leave\",\n                    \"id\": 82\n                },\n                {\n                    \"name\": \"kick\",\n                    \"id\": 83\n                },\n                {\n                    \"name\": \"reject\",\n                    \"id\": 84\n                },\n                {\n                    \"name\": \"invited\",\n                    \"id\": 85\n                },\n                {\n                    \"name\": \"kicked\",\n                    \"id\": 86\n                },\n                {\n                    \"name\": \"upload\",\n                    \"id\": 100\n                },\n                {\n                    \"name\": \"uploaded\",\n                    \"id\": 101\n                },\n                {\n                    \"name\": \"subscribe\",\n                    \"id\": 120\n                },\n                {\n                    \"name\": \"subscribed\",\n                    \"id\": 121\n                },\n                {\n                    \"name\": \"unsubscribe\",\n                    \"id\": 122\n                },\n                {\n                    \"name\": \"unsubscribed\",\n                    \"id\": 123\n                },\n                {\n                    \"name\": \"is_subscribed\",\n                    \"id\": 124\n                },\n                {\n                    \"name\": \"modify\",\n                    \"id\": 150\n                },\n                {\n                    \"name\": \"modified\",\n                    \"id\": 151\n                },\n                {\n                    \"name\": \"block\",\n                    \"id\": 170\n                },\n                {\n                    \"name\": \"unblock\",\n                    \"id\": 171\n                },\n                {\n                    \"name\": \"blocked\",\n                    \"id\": 172\n                },\n                {\n                    \"name\": \"unblocked\",\n                    \"id\": 173\n                },\n                {\n                    \"name\": \"members_blocked\",\n                    \"id\": 174\n                },\n                {\n                    \"name\": \"members_unblocked\",\n                    \"id\": 175\n                },\n                {\n                    \"name\": \"add_shutup\",\n                    \"id\": 180\n                },\n                {\n                    \"name\": \"remove_shutup\",\n                    \"id\": 181\n                },\n                {\n                    \"name\": \"query_shutup\",\n                    \"id\": 182\n                },\n                {\n                    \"name\": \"shutup_added\",\n                    \"id\": 183\n                },\n                {\n                    \"name\": \"shutup_removed\",\n                    \"id\": 184\n                },\n                {\n                    \"name\": \"shutup_result\",\n                    \"id\": 185\n                },\n                {\n                    \"name\": \"shutuped\",\n                    \"id\": 186\n                },\n                {\n                    \"name\": \"unshutuped\",\n                    \"id\": 187\n                },\n                {\n                    \"name\": \"members_shutuped\",\n                    \"id\": 188\n                },\n                {\n                    \"name\": \"members_unshutuped\",\n                    \"id\": 189\n                }\n            ]\n        },\n        {\n            \"name\": \"StatusType\",\n            \"syntax\": \"proto2\",\n            \"values\": [\n                {\n                    \"name\": \"on\",\n                    \"id\": 1\n                },\n                {\n                    \"name\": \"off\",\n                    \"id\": 2\n                }\n            ]\n        }\n    ],\n    \"isNamespace\": true\n}).build();\n","import messages from './message-compiled';\n\nconst {\n  JsonObjectMessage,\n  UnreadTuple,\n  LogItem,\n  DataCommand,\n  SessionCommand,\n  ErrorCommand,\n  DirectCommand,\n  AckCommand,\n  UnreadCommand,\n  ConvCommand,\n  RoomCommand,\n  LogsCommand,\n  RcpCommand,\n  ReadTuple,\n  MaxReadTuple,\n  ReadCommand,\n  PresenceCommand,\n  ReportCommand,\n  GenericCommand,\n  BlacklistCommand,\n  PatchCommand,\n  PatchItem,\n  ConvMemberInfo,\n  CommandType,\n  OpType,\n  StatusType,\n} = messages.push_server.messages2;\n\nexport {\n  JsonObjectMessage,\n  UnreadTuple,\n  LogItem,\n  DataCommand,\n  SessionCommand,\n  ErrorCommand,\n  DirectCommand,\n  AckCommand,\n  UnreadCommand,\n  ConvCommand,\n  RoomCommand,\n  LogsCommand,\n  RcpCommand,\n  ReadTuple,\n  MaxReadTuple,\n  ReadCommand,\n  PresenceCommand,\n  ReportCommand,\n  GenericCommand,\n  BlacklistCommand,\n  PatchCommand,\n  PatchItem,\n  ConvMemberInfo,\n  CommandType,\n  OpType,\n  StatusType,\n};\n","/* eslint-disable */\nexport default (typeof global !== 'undefined'\n  ? global\n  : typeof window !== 'undefined' ? window : {});\n","import d from 'debug';\n\nconst EXPIRED = Symbol('expired');\nconst debug = d('LC:Expirable');\nexport default class Expirable {\n  constructor(value, ttl) {\n    this.originalValue = value;\n    if (typeof ttl === 'number') {\n      this.expiredAt = Date.now() + ttl;\n    }\n  }\n\n  get value() {\n    const expired = this.expiredAt && this.expiredAt <= Date.now();\n    if (expired) debug(`expired: ${this.originalValue}`);\n    return expired ? EXPIRED : this.originalValue;\n  }\n}\nExpirable.EXPIRED = EXPIRED;\n","import d from 'debug';\nimport Expirable from './expirable';\n\nconst debug = d('LC:Cache');\nexport default class Cache {\n  constructor(name = 'anonymous') {\n    this.name = name;\n    this._map = {};\n  }\n\n  get(key) {\n    const cache = this._map[key];\n    if (cache) {\n      const { value } = cache;\n      if (value !== Expirable.EXPIRED) {\n        debug('[%s] hit: %s %O', this.name, key, value);\n        return value;\n      }\n      delete this._map[key];\n    }\n    debug(`[${this.name}] missed: ${key}`);\n    return null;\n  }\n\n  set(key, value, ttl) {\n    debug('[%s] set: %s %O %d', this.name, key, value, ttl);\n    this._map[key] = new Expirable(value, ttl);\n  }\n}\n","import isPlainObject from 'lodash/isPlainObject';\nimport global from './global';\n\nexport { global };\n\nexport const tryAll = promiseConstructors => {\n  const promise = new Promise(promiseConstructors[0]);\n  if (promiseConstructors.length === 1) {\n    return promise;\n  }\n  return promise.catch(() => tryAll(promiseConstructors.slice(1)));\n};\n\n// eslint-disable-next-line no-sequences\nexport const tap = interceptor => value => (interceptor(value), value);\n\nexport { default as Expirable } from './expirable';\nexport { default as Cache } from './cache';\n\n/**\n * 将对象转换为 Date，支持 string、number、ProtoBuf Long 以及 LeanCloud 的 Date 类型，\n * 其他情况下（包括对象为 falsy）返回原值。\n * @private\n */\nexport const decodeDate = date => {\n  if (!date) return date;\n  if (typeof date === 'string' || typeof date === 'number') {\n    return new Date(date);\n  }\n  if (date.__type === 'Date' && date.iso) {\n    return new Date(date.iso);\n  }\n  // Long\n  if (typeof date.toNumber === 'function') {\n    return new Date(date.toNumber());\n  }\n  return date;\n};\n/**\n * 获取 Date 的毫秒数，如果不是一个 Date 返回 undefined。\n * @private\n */\nexport const getTime = date =>\n  date && date.getTime ? date.getTime() : undefined;\n\n/**\n * 解码对象中的 LeanCloud 数据结构。\n * 目前仅会处理 Date 类型。\n * @private\n */\nexport const decode = value => {\n  if (!value) return value;\n  if (value.__type === 'Date' && value.iso) {\n    return new Date(value.iso);\n  }\n  if (isPlainObject(value)) {\n    return Object.keys(value).reduce(\n      (result, key) => ({\n        ...result,\n        [key]: decode(value[key]),\n      }),\n      {}\n    );\n  }\n  return value;\n};\n/**\n * 将对象中的特殊类型编码为 LeanCloud 数据结构。\n * 目前仅会处理 Date 类型。\n * @private\n */\nexport const encode = value => {\n  if (value instanceof Date) return { __type: 'Date', iso: value.toJSON() };\n  if (isPlainObject(value)) {\n    return Object.keys(value).reduce(\n      (result, key) => ({\n        ...result,\n        [key]: encode(value[key]),\n      }),\n      {}\n    );\n  }\n  return value;\n};\n\nexport const keyRemap = (keymap, obj) =>\n  Object.keys(obj).reduce((newObj, key) => {\n    const newKey = keymap[key] || key;\n    return Object.assign(newObj, {\n      [newKey]: obj[key],\n    });\n  }, {});\n\nexport const isIE10 =\n  global.navigator &&\n  global.navigator.userAgent &&\n  global.navigator.userAgent.indexOf('MSIE 10.') !== -1;\n\n/* eslint-disable no-proto */\nexport const getStaticProperty = (klass, property) =>\n  klass[property] ||\n  (klass.__proto__ ? getStaticProperty(klass.__proto__, property) : undefined);\n/* eslint-enable no-proto */\n\nexport const union = (a, b) => Array.from(new Set([...a, ...b]));\nexport const difference = (a, b) =>\n  Array.from((bSet => new Set(a.filter(x => !bSet.has(x))))(new Set(b)));\n\nconst map = new WeakMap();\n\n// protected property helper\nexport const internal = object => {\n  if (!map.has(object)) {\n    map.set(object, {});\n  }\n  return map.get(object);\n};\n\nexport const compact = (obj, filter) => {\n  if (!isPlainObject(obj)) return obj;\n  const object = Object.assign({}, obj);\n  // eslint-disable-next-line no-restricted-syntax\n  for (const prop in object) {\n    if ({}.hasOwnProperty.call(object, prop)) {\n      const value = object[prop];\n      if (value === filter) {\n        delete object[prop];\n      } else {\n        object[prop] = compact(value, filter);\n      }\n    }\n  }\n  return object;\n};\n\n// debug utility\nconst removeNull = obj => compact(obj, null);\nexport const trim = message => removeNull(JSON.parse(JSON.stringify(message)));\n\nexport const ensureArray = target => {\n  if (Array.isArray(target)) {\n    return target;\n  }\n  if (target === undefined || target === null) {\n    return [];\n  }\n  return [target];\n};\n\nexport const setValue = (target, key, value) => {\n  // '.' is not allowed in Class keys, escaping is not in concern now.\n  const segs = key.split('.');\n  const lastSeg = segs.pop();\n  let currentTarget = target;\n  segs.forEach(seg => {\n    if (currentTarget[seg] === undefined) currentTarget[seg] = {};\n    currentTarget = currentTarget[seg];\n  });\n  currentTarget[lastSeg] = value;\n  return target;\n};\n\nexport const isWeapp =\n  // eslint-disable-next-line no-undef\n  typeof wx === 'object' && typeof wx.connectSocket === 'function';\n\n// throttle decorator\nexport const throttle = wait => (target, property, descriptor) => {\n  const callback = descriptor.value;\n  // very naive, internal use only\n  if (callback.length) {\n    throw new Error('throttled function should not accept any arguments');\n  }\n  return {\n    ...descriptor,\n    value() {\n      let { throttleMeta } = internal(this);\n      if (!throttleMeta) {\n        throttleMeta = {};\n        internal(this).throttleMeta = throttleMeta;\n      }\n      let { [property]: propertyMeta } = throttleMeta;\n      if (!propertyMeta) {\n        propertyMeta = {};\n        throttleMeta[property] = propertyMeta;\n      }\n      const { previouseTimestamp = 0, timeout } = propertyMeta;\n      const now = Date.now();\n      const remainingTime = wait - (now - previouseTimestamp);\n      if (remainingTime <= 0) {\n        throttleMeta[property].previouseTimestamp = now;\n        callback.apply(this);\n      } else if (!timeout) {\n        propertyMeta.timeout = setTimeout(() => {\n          propertyMeta.previouseTimestamp = Date.now();\n          delete propertyMeta.timeout;\n          callback.apply(this);\n        }, remainingTime);\n      }\n    },\n  };\n};\n","// WebSocket with auto reconnecting feature, backup endpoint and EventEmitter interface.\n\nimport d from 'debug';\nimport EventEmitter from 'eventemitter3';\nimport StateMachine from 'javascript-state-machine';\n\nimport WebSocket from 'ws';\n\nimport { ensureArray, tryAll, global } from './utils';\n\nconst debug = d('LC:WebSocketPlus');\n\nexport const OPEN = 'open';\nexport const DISCONNECT = 'disconnect';\nexport const RECONNECT = 'reconnect';\nexport const RETRY = 'retry';\nexport const SCHEDULE = 'schedule';\nexport const OFFLINE = 'offline';\nexport const ONLINE = 'online';\nexport const ERROR = 'error';\nexport const MESSAGE = 'message';\n\nconst HEARTBEAT_TIME = 180000;\nconst TIMEOUT_TIME = 380000;\n\nconst DEFAULT_RETRY_STRATEGY = attempt => Math.min(1000 * 2 ** attempt, 300000);\n\nconst requireConnected = (target, name, descriptor) =>\n  Object.assign({}, descriptor, {\n    value: function requireConnectedWrapper(...args) {\n      this.checkConnectionAvailability(name);\n      return descriptor.value.call(this, ...args);\n    },\n  });\n\nclass WebSocketPlus extends EventEmitter {\n  constructor(getUrls, protocol) {\n    if (typeof WebSocket === 'undefined') {\n      throw new Error(\n        'WebSocket is undefined. Polyfill is required in this runtime.'\n      );\n    }\n    super();\n    if (typeof getUrls !== 'function') {\n      this._getUrls = () => Promise.resolve(getUrls);\n    } else {\n      this._getUrls = getUrls;\n    }\n    this._protocol = protocol;\n    this.init();\n    this._createWs(this._getUrls, this._protocol)\n      .then(() => {\n        this.__postponeTimeoutTimer = this._postponeTimeoutTimer.bind(this);\n        if (global.addEventListener) {\n          this.__pause = () => this.pause();\n          this.__resume = () => this.resume();\n          global.addEventListener('offline', this.__pause);\n          global.addEventListener('online', this.__resume);\n        }\n        this.open();\n      })\n      .catch(this.throw.bind(this));\n  }\n\n  _createWs(getUrls, protocol) {\n    return getUrls().then(urls =>\n      tryAll(\n        ensureArray(urls).map(url => (resolve, reject) => {\n          debug(`connect [${url}] ${protocol}`);\n          const ws = protocol\n            ? new WebSocket(url, protocol)\n            : new WebSocket(url);\n          ws.binaryType = this.binaryType || 'arraybuffer';\n          ws.onopen = () => resolve(ws);\n          ws.onclose = error => {\n            if (error instanceof Error) {\n              return reject(error);\n            }\n            // in browser, error event is useless\n            return reject(new Error(`Failed to connect [${url}]`));\n          };\n          ws.onerror = ws.onclose;\n        })\n      ).then(ws => {\n        this._ws = ws;\n        this._ws.onclose = this._handleClose.bind(this);\n        this._ws.onmessage = this._handleMessage.bind(this);\n        return ws;\n      })\n    );\n  }\n  _destroyWs() {\n    const ws = this._ws;\n    if (!ws) return;\n    ws.onopen = null;\n    ws.onclose = null;\n    ws.onerror = null;\n    ws.onmessage = null;\n    this._ws = null;\n    ws.close();\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  onbeforeevent(event, from, to, ...payload) {\n    debug(`${event}: ${from} -> ${to}`, ...payload);\n  }\n  onopen() {\n    this.emit(OPEN);\n  }\n  onconnected() {\n    this._startConnectionKeeper();\n  }\n  onleaveconnected(event, from, to) {\n    this._stopConnectionKeeper();\n    this._destroyWs();\n    if (to === 'offline' || to === 'disconnected') {\n      this.emit(DISCONNECT);\n    }\n  }\n  onpause() {\n    this.emit(OFFLINE);\n  }\n  onbeforeresume() {\n    this.emit(ONLINE);\n  }\n  onreconnect() {\n    this.emit(RECONNECT);\n  }\n  ondisconnected(event, from, to, attempt = 0) {\n    const delay = DEFAULT_RETRY_STRATEGY.call(null, attempt);\n    debug(`schedule attempt=${attempt} delay=${delay}`);\n    this.emit(SCHEDULE, attempt, delay);\n    if (this.__scheduledRetry) {\n      clearTimeout(this.__scheduledRetry);\n    }\n    this.__scheduledRetry = setTimeout(() => {\n      if (this.is('disconnected')) {\n        this.retry(attempt);\n      }\n    }, delay);\n  }\n  onretry(event, from, to, attempt = 0) {\n    this.emit(RETRY, attempt);\n    this._createWs(this._getUrls, this._protocol).then(\n      () => (this.can('reconnect') ? this.reconnect() : this._destroyWs()),\n      () => this.can('fail') && this.fail(attempt + 1)\n    );\n  }\n  onerror(event, from, to, error) {\n    this.emit(ERROR, error);\n  }\n  onclose() {\n    if (global.removeEventListener) {\n      if (this.__pause) global.removeEventListener('offline', this.__pause);\n      if (this.__resume) global.removeEventListener('online', this.__resume);\n    }\n  }\n\n  checkConnectionAvailability(name = 'API') {\n    if (!this.is('connected')) {\n      const currentState = this.current;\n      console.warn(\n        `${name} should not be called when the connection is ${currentState}`\n      );\n      if (this.is('disconnected') || this.is('reconnecting')) {\n        console.warn(\n          'disconnect and reconnect event should be handled to avoid such calls.'\n        );\n      }\n      throw new Error('Connection unavailable');\n    }\n  }\n\n  // jsdoc-ignore-start\n  @requireConnected\n  // jsdoc-ignore-end\n  _ping() {\n    debug('ping');\n    try {\n      this.ping();\n    } catch (error) {\n      console.warn(`websocket ping error: ${error.message}`);\n    }\n  }\n  ping() {\n    if (this._ws.ping) {\n      this._ws.ping();\n    } else {\n      console.warn(`The WebSocket implement does not support sending ping frame.\n        Override ping method to use application defined ping/pong mechanism.`);\n    }\n  }\n\n  _postponeTimeoutTimer() {\n    debug('_postponeTimeoutTimer');\n    this._clearTimeoutTimers();\n    this._timeoutTimer = setTimeout(() => {\n      debug('timeout');\n      this.disconnect();\n    }, TIMEOUT_TIME);\n  }\n  _clearTimeoutTimers() {\n    if (this._timeoutTimer) {\n      clearTimeout(this._timeoutTimer);\n    }\n  }\n  _startConnectionKeeper() {\n    debug('start connection keeper');\n    this._heartbeatTimer = setInterval(this._ping.bind(this), HEARTBEAT_TIME);\n    const addListener = this._ws.addListener || this._ws.addEventListener;\n    addListener.call(this._ws, 'message', this.__postponeTimeoutTimer);\n    addListener.call(this._ws, 'pong', this.__postponeTimeoutTimer);\n    this._postponeTimeoutTimer();\n  }\n  _stopConnectionKeeper() {\n    debug('stop connection keeper');\n    // websockets/ws#489\n    const removeListener =\n      this._ws.removeListener || this._ws.removeEventListener;\n    removeListener.call(this._ws, 'message', this.__postponeTimeoutTimer);\n    removeListener.call(this._ws, 'pong', this.__postponeTimeoutTimer);\n    this._clearTimeoutTimers();\n    if (this._heartbeatTimer) {\n      clearInterval(this._heartbeatTimer);\n    }\n  }\n\n  _handleClose(event) {\n    debug(`ws closed [${event.code}] ${event.reason}`);\n    // socket closed manually, ignore close event.\n    if (this.isFinished()) return;\n    this.handleClose(event);\n  }\n  handleClose() {\n    // reconnect\n    this.disconnect();\n  }\n\n  // jsdoc-ignore-start\n  @requireConnected\n  // jsdoc-ignore-end\n  send(data) {\n    debug('send', data);\n    this._ws.send(data);\n  }\n\n  _handleMessage(event) {\n    debug('message', event.data);\n    this.handleMessage(event.data);\n  }\n  handleMessage(message) {\n    this.emit(MESSAGE, message);\n  }\n}\n\nStateMachine.create({\n  target: WebSocketPlus.prototype,\n  initial: {\n    state: 'initialized',\n    event: 'init',\n    defer: true,\n  },\n  terminal: 'closed',\n  events: [\n    {\n      name: 'open',\n      from: 'initialized',\n      to: 'connected',\n    },\n    {\n      name: 'disconnect',\n      from: 'connected',\n      to: 'disconnected',\n    },\n    {\n      name: 'retry',\n      from: 'disconnected',\n      to: 'reconnecting',\n    },\n    {\n      name: 'fail',\n      from: 'reconnecting',\n      to: 'disconnected',\n    },\n    {\n      name: 'reconnect',\n      from: 'reconnecting',\n      to: 'connected',\n    },\n    {\n      name: 'pause',\n      from: ['connected', 'disconnected', 'reconnecting'],\n      to: 'offline',\n    },\n    {},\n    {\n      name: 'resume',\n      from: 'offline',\n      to: 'disconnected',\n    },\n    {\n      name: 'close',\n      from: ['connected', 'disconnected', 'reconnecting', 'offline'],\n      to: 'closed',\n    },\n    {\n      name: 'throw',\n      from: '*',\n      to: 'error',\n    },\n  ],\n});\n\nexport default WebSocketPlus;\n","export const error = Object.freeze({\n  1000: {\n    name: 'CLOSE_NORMAL',\n  },\n  1006: {\n    name: 'CLOSE_ABNORMAL',\n  },\n  4100: {\n    name: 'APP_NOT_AVAILABLE',\n    message: 'App not exists or realtime message service is disabled.',\n  },\n  4103: {\n    name: 'INVALID_LOGIN',\n    message: 'Malformed clientId.',\n  },\n  4105: {\n    name: 'SESSION_REQUIRED',\n    message: 'Message sent before session opened.',\n  },\n  4107: {\n    name: 'READ_TIMEOUT',\n  },\n  4108: {\n    name: 'LOGIN_TIMEOUT',\n  },\n  4109: {\n    name: 'FRAME_TOO_LONG',\n  },\n  4110: {\n    name: 'INVALID_ORIGIN',\n    message: 'Access denied by domain whitelist.',\n  },\n  4111: {\n    name: 'SESSION_CONFLICT',\n  },\n  4112: {\n    name: 'SESSION_TOKEN_EXPIRED',\n  },\n  4200: {\n    name: 'INTERNAL_ERROR',\n    message: 'Internal error, please contact LeanCloud for support.',\n  },\n  4201: {\n    name: 'SEND_MESSAGE_TIMEOUT',\n  },\n  4302: {\n    name: 'CONVERSATION_SIGNATURE_FAILED',\n  },\n  4303: {\n    name: 'CONVERSATION_NOT_FOUND',\n  },\n  4304: {\n    name: 'CONVERSATION_FULL',\n  },\n  4305: {\n    name: 'CONVERSATION_REJECTED_BY_APP',\n  },\n  4306: {\n    name: 'CONVERSATION_UPDATE_FAILED',\n  },\n  4307: {\n    name: 'CONVERSATION_READ_ONLY',\n  },\n  4308: {\n    name: 'CONVERSATION_NOT_ALLOWED',\n  },\n  4317: {\n    name: 'CONVERSATION_EXPIRED',\n    message: 'Temporary conversation expired or does not exist.',\n  },\n  4401: {\n    name: 'INVALID_MESSAGING_TARGET',\n  },\n  4402: {\n    name: 'MESSAGE_REJECTED_BY_APP',\n  },\n});\n\nexport const ErrorCode = Object.freeze(\n  Object.keys(error).reduce(\n    (result, code) =>\n      Object.assign(result, {\n        [error[code].name]: Number(code),\n      }),\n    {}\n  )\n);\n\nexport const createError = ({\n  code,\n  reason,\n  appCode,\n  detail,\n  error: errorMessage,\n}) => {\n  let message = reason || detail || errorMessage;\n  if (!message && error[code]) {\n    message = error[code].message || error[code].name;\n  }\n  if (!message) {\n    message = `Unknow Error: ${code}`;\n  }\n  const err = new Error(message);\n  return Object.assign(err, {\n    code,\n    appCode,\n    detail,\n  });\n};\n","import d from 'debug';\nimport WebSocketPlus, {\n  OPEN,\n  DISCONNECT,\n  RECONNECT,\n  RETRY,\n  SCHEDULE,\n  OFFLINE,\n  ONLINE,\n  ERROR,\n  MESSAGE,\n} from './websocket-plus';\nimport { createError } from './error';\nimport { GenericCommand, CommandType } from '../proto/message';\nimport { trim, isWeapp } from './utils';\n\nconst debug = d('LC:Connection');\n\nconst COMMAND_TIMEOUT = 20000;\n\nexport {\n  OPEN,\n  DISCONNECT,\n  RECONNECT,\n  RETRY,\n  SCHEDULE,\n  OFFLINE,\n  ONLINE,\n  ERROR,\n  MESSAGE,\n};\n\nexport default class Connection extends WebSocketPlus {\n  constructor(getUrl, { format, version }) {\n    debug('initializing Connection');\n    const protocolString = `lc.${format}.${version}`;\n    if (!isWeapp) {\n      super(getUrl, protocolString);\n    } else {\n      super(\n        getUrl().then(urls =>\n          urls.map(\n            url =>\n              `${url}${\n                url.indexOf('?') === -1 ? '?' : '&'\n              }subprotocol=${encodeURIComponent(protocolString)}`\n          )\n        )\n      );\n    }\n    this._protocalFormat = format;\n    this._commands = {};\n    this._serialId = 0;\n  }\n\n  async send(command, waitingForRespond = true) {\n    let serialId;\n    if (waitingForRespond) {\n      this._serialId += 1;\n      serialId = this._serialId;\n      command.i = serialId; // eslint-disable-line no-param-reassign\n    }\n    if (debug.enabled) debug('↑ %O sent', trim(command));\n\n    let message;\n    if (this._protocalFormat === 'proto2base64') {\n      message = command.toBase64();\n    } else if (command.toArrayBuffer) {\n      message = command.toArrayBuffer();\n    }\n    if (!message) {\n      throw new TypeError(`${command} is not a GenericCommand`);\n    }\n\n    super.send(message);\n\n    if (!waitingForRespond) return undefined;\n    return new Promise((resolve, reject) => {\n      this._commands[serialId] = {\n        resolve,\n        reject,\n        timeout: setTimeout(() => {\n          if (this._commands[serialId]) {\n            if (debug.enabled) debug('✗ %O timeout', trim(command));\n            reject(new Error('Command Timeout.'));\n            delete this._commands[serialId];\n          }\n        }, COMMAND_TIMEOUT),\n      };\n    });\n  }\n\n  handleMessage(msg) {\n    let message;\n    try {\n      message = GenericCommand.decode(msg);\n      if (debug.enabled) debug('↓ %O received', trim(message));\n    } catch (e) {\n      console.warn('Decode message failed', msg);\n    }\n    const serialId = message.i;\n    if (serialId) {\n      if (this._commands[serialId]) {\n        clearTimeout(this._commands[serialId].timeout);\n        if (message.cmd === CommandType.error) {\n          this._commands[serialId].reject(createError(message.errorMessage));\n        } else {\n          this._commands[serialId].resolve(message);\n        }\n        delete this._commands[serialId];\n      } else {\n        console.warn(`Unexpected command received with serialId [${serialId}],\n         which have timed out or never been requested.`);\n      }\n    } else if (message.cmd === CommandType.error) {\n      this.emit(ERROR, createError(message.errorMessage));\n    } else {\n      this.emit(MESSAGE, message);\n    }\n  }\n\n  ping() {\n    return this.send(\n      new GenericCommand({\n        cmd: CommandType.echo,\n      })\n    ).catch(error => debug('ping failed:', error));\n  }\n}\n","/* eslint-disable max-len */\n\n/**\n * 插件接口\n *\n * <p>\n * 插件是由一个或多个扩展点组成的字典。SDK 的扩展点可以分为两类：\n * <p>\n * 第一类扩展点是类实例化之后的回调，包括 <code>Realtime</code>、<code>IMClient</code> 与 <code>Conversation</code>。这些扩展点可以通过一个同步的 Decorator 进行扩展。Decorator 接受一个对应的实例并对其进行一些操作。\n * 特别的，由于注册自定义消息类这个需求特别的常用，额外定义一个 messageClasses 扩展点来做这件事情。\n * <p>\n * 第二类扩展点是在某些事件处理前、后可以注入逻辑的点。\n * 其中 <code>beforeMessageParse</code>，<code>afterMessageParse</code> 可以通过一个异步的 Middleware 进行扩展。Middleware 接受一个对象，返回一个同类型对象或同类型对象的 Promise。\n * <code>beforeMessageDispatch</code> 可以通过返回一个 boolean 类型的 shouldDispatch 值来控制是否要继续派发收到的消息。\n * <p>\n * 如果使用了多个插件，这些 hook 会按照插件数组的顺序依次执行。前一个 Middleware 的返回值会作为参数传给后一个 Middleware。\n *\n * @interface Plugin\n * @since 3.1.0\n */\n\n/* eslint-enable max-len */\n\n/**\n * 插件名称，用于在日志中显示异常的插件\n *\n * @name Plugin.name\n * @type string\n */\n\n/**\n * 插件注册的消息类型\n *\n * @name Plugin.messageClasses\n * @type AVMessage[]\n */\n\n/**\n * 在 Realtime 实例化后对其进行修饰。\n * <p>\n * 接受一个参数为 Realtime 实例。\n *\n * @name Plugin.onRealtimeCreate\n * @type Function\n */\n\n/**\n * 在 IMClient 实例化后对其进行修饰。\n * <p>\n * 接受一个参数为 IMClient 实例。\n *\n * @name Plugin.onIMClientCreate\n * @type Function\n */\n\n/**\n * 在 Conversation 实例化后对其进行修饰。\n * <p>\n * 接受一个参数为 Conversation 实例。\n * 需要注意的是，该扩展点并不是在 <code>{@link IMClient#createConversation}</code> 方法创建成功后调用的 hook，\n * 而是所有的 Conversation 实例化的时候（包括但不限于 query 时）调用的 hook。\n *\n * @name Plugin.onConversationCreate\n * @type Function\n */\n\n/**\n * 在对消息进行 parse 之前，对原始消息进行修改。\n * <p>\n * 接受一个参数为原始消息，是某个消息的内容，一般是一个 JSON 对象。\n * 该方法需要返回一个 JSON 对象。如果这个结果是异步得到的，也可以返回一个 Promise(fulfilled with a JSON)。\n *\n * @name Plugin.beforeMessageParse\n * @type Function\n */\n\n/**\n * 在对消息进行 parse 之后，对消息实例进行修改。\n * <p>\n * 接受一个参数为消息实例，一般是一个已注册的 Message 类或其子类的实例。\n * 该方法需要返回一个同类型的消息实例。如果这个结果是异步得到的，也可以返回一个 Promise。\n *\n * @name Plugin.afterMessageParse\n * @type Function\n */\n\n/**\n * 在收到消息之后，派发消息之前，控制是否派发这条消息。\n * <p>\n * 接受参数为 message 与 conversation。\n * 该方法需要返回 boolean 类型的值，如果返回 false 则 SDK 不再派发这条消息，后续的 beforeMessageDispatch 也不会执行。\n * 如果这个结果是异步得到的，也可以返回一个 Promise。\n *\n * @name Plugin.beforeMessageDispatch\n * @type Function\n * @since 3.4.0\n */\n\nimport { ensureArray, tap } from './utils';\n\nconst checkType = middleware => param => {\n  const { constructor } = param;\n  return Promise.resolve(param)\n    .then(middleware)\n    .then(\n      tap(result => {\n        if (result === undefined || result === null) {\n          // eslint-disable-next-line max-len\n          return console.warn(\n            `Middleware[${middleware._pluginName ||\n              'anonymous plugin'}:${middleware.name ||\n              'anonymous middleware'}] param/return types not match. It returns ${result} while a ${\n              param.constructor.name\n            } expected.`\n          );\n        }\n        if (!(result instanceof constructor)) {\n          // eslint-disable-next-line max-len\n          return console.warn(\n            `Middleware[${middleware._pluginName ||\n              'anonymous plugin'}:${middleware.name ||\n              'anonymous middleware'}] param/return types not match. It returns a ${\n              result.constructor.name\n            } while a ${param.constructor.name} expected.`\n          );\n        }\n        return 0;\n      })\n    );\n};\n\nexport const applyDecorators = (decorators, target) => {\n  if (decorators) {\n    decorators.forEach(decorator => {\n      try {\n        decorator(target);\n      } catch (error) {\n        if (decorator._pluginName) {\n          error.message += `[${decorator._pluginName}]`;\n        }\n        throw error;\n      }\n    });\n  }\n};\n\nexport const applyMiddlewares = middlewares => target =>\n  ensureArray(middlewares).reduce(\n    (previousPromise, middleware) =>\n      previousPromise.then(checkType(middleware)).catch(error => {\n        if (middleware._pluginName) {\n          // eslint-disable-next-line no-param-reassign\n          error.message += `[${middleware._pluginName}]`;\n        }\n        throw error;\n      }),\n    Promise.resolve(target)\n  );\n\nexport const applyDispatcher = (dispatchers, payload) =>\n  ensureArray(dispatchers).reduce(\n    (resultPromise, dispatcher) =>\n      resultPromise\n        .then(\n          shouldDispatch =>\n            shouldDispatch === false ? false : dispatcher(...payload)\n        )\n        .catch(error => {\n          if (dispatcher._pluginName) {\n            // eslint-disable-next-line no-param-reassign\n            error.message += `[${dispatcher._pluginName}]`;\n          }\n          throw error;\n        }),\n    Promise.resolve(true)\n  );\n","import d from 'debug';\nimport EventEmitter from 'eventemitter3';\nimport axios from 'axios';\nimport shuffle from 'lodash/shuffle';\nimport Connection, {\n  OPEN,\n  DISCONNECT,\n  RECONNECT,\n  RETRY,\n  SCHEDULE,\n  OFFLINE,\n  ONLINE,\n  ERROR,\n  MESSAGE,\n} from './connection';\nimport { ErrorCode, createError } from './error';\nimport { tap, Cache, trim, internal, ensureArray, isWeapp } from './utils';\nimport { applyDecorators, applyDispatcher } from './plugin';\nimport { version as VERSION } from '../package.json';\n\nconst debug = d('LC:Realtime');\nconst debugRequest = d('LC:request');\n\nconst routerCache = new Cache('push-router');\n\nexport default class Realtime extends EventEmitter {\n  /**\n   * @extends EventEmitter\n   * @param  {Object} options\n   * @param  {String} options.appId\n   * @param  {String} options.appKey （since 4.0.0）\n   * @param  {String} [options.region='cn'] 节点 id\n   * @param  {Boolean} [options.pushOfflineMessages=false] 启用推送离线消息模式（默认为发送未读消息通知模式）\n   * @param  {Boolean} [options.noBinary=false] 设置 WebSocket 使用字符串格式收发消息（默认为二进制格式）。\n   *                                            适用于 WebSocket 实现不支持二进制数据格式的情况\n   * @param  {Boolean} [options.ssl=true] 使用 wss 进行连接\n   * @param  {String} [options.server] 指定私有部署的服务器域名（since 4.0.0）\n   * @param  {String|String[]} [options.RTMServers] 指定私有部署的 RTM 服务器地址（since 4.0.0）\n   * @param  {Plugin[]} [options.plugins] 加载插件（since 3.1.0）\n   */\n  constructor({ plugins, ...options }) {\n    debug('initializing Realtime %s %O', VERSION, options);\n    super();\n    if (typeof options.appId !== 'string') {\n      throw new TypeError(`appId [${options.appId}] is not a string`);\n    }\n    if (typeof options.appKey !== 'string') {\n      throw new TypeError(`appKey [${options.appKey}] is not a string`);\n    }\n    this._options = Object.assign(\n      {\n        appId: undefined,\n        appKey: undefined,\n        region: 'cn',\n        pushOfflineMessages: false,\n        noBinary: false,\n        ssl: true,\n        RTMServerName: process.env.RTM_SERVER_NAME, // undocumented on purpose, internal use only\n      },\n      options\n    );\n    this._cache = new Cache('endpoints');\n    const _this = internal(this);\n    _this.clients = new Set();\n    _this.pendingClients = new Set();\n    const mergedPlugins = [\n      ...ensureArray(Realtime.__preRegisteredPlugins),\n      ...ensureArray(plugins),\n    ];\n    debug('Using plugins %o', mergedPlugins.map(plugin => plugin.name));\n    this._plugins = mergedPlugins.reduce((result, plugin) => {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const hook in plugin) {\n        if ({}.hasOwnProperty.call(plugin, hook) && hook !== 'name') {\n          if (plugin.name) {\n            ensureArray(plugin[hook]).forEach(value => {\n              // eslint-disable-next-line no-param-reassign\n              value._pluginName = plugin.name;\n            });\n          }\n          // eslint-disable-next-line no-param-reassign\n          result[hook] = ensureArray(result[hook]).concat(plugin[hook]);\n        }\n      }\n      return result;\n    }, {});\n    // onRealtimeCreate hook\n    applyDecorators(this._plugins.onRealtimeCreate, this);\n  }\n\n  async _request({ method, version = '1.1', path, query, headers, data = {} }) {\n    const { appId, region } = this._options;\n    const { api } = await this.constructor._getServerUrls({ appId, region });\n    const url = `https://${api}/${version}${path}`;\n    const options = {\n      method,\n      params: query,\n      headers: {\n        'X-LC-Id': this._options.appId,\n        'X-LC-Key': this._options.appKey,\n        ...headers,\n      },\n      data,\n    };\n    debugRequest('Req: %O %O', url, options);\n    return axios(url, options).then(\n      response => {\n        debugRequest('Res: %O %O %O', url, response.status, response.data);\n        return response.data;\n      },\n      error => {\n        debugRequest(\n          'Error: %O %O %O',\n          url,\n          error.response.status,\n          error.response.data\n        );\n        if (error.response && error.response.data && error.response.data.code) {\n          throw createError(error.response.data);\n        }\n        throw error;\n      }\n    );\n  }\n\n  _open() {\n    if (this._openPromise) return this._openPromise;\n\n    let format = 'protobuf2';\n    if (this._options.noBinary) {\n      // 不发送 binary data，fallback to base64 string\n      format = 'proto2base64';\n    }\n    let version = 3;\n    if (this._options.pushOfflineMessages) {\n      // 不推送离线消息，而是发送对话的未读通知\n      version = 1;\n    }\n    const protocol = {\n      format,\n      version,\n    };\n    this._openPromise = new Promise((resolve, reject) => {\n      debug('No connection established, create a new one.');\n      const connection = new Connection(\n        () => this._getRTMServers(this._options),\n        protocol\n      );\n      connection.on(OPEN, () => resolve(connection));\n      connection.on(ERROR, reject);\n      connection.on(MESSAGE, this._dispatchCommand.bind(this));\n      /**\n       * 连接断开。\n       * 连接断开可能是因为 SDK 进入了离线状态（see {@link Realtime#event:OFFLINE}），或长时间没有收到服务器心跳。\n       * 连接断开后所有的网络操作都会失败，请在连接断开后禁用相关的 UI 元素。\n       * @event Realtime#DISCONNECT\n       */\n      /**\n       * 计划在一段时间后尝试重新连接\n       * @event Realtime#SCHEDULE\n       * @param {Number} attempt 尝试重连的次数\n       * @param {Number} delay 延迟的毫秒数\n       */\n      /**\n       * 正在尝试重新连接\n       * @event Realtime#RETRY\n       * @param {Number} attempt 尝试重连的次数\n       */\n      /**\n       * 连接恢复正常。\n       * 请重新启用在 {@link Realtime#event:DISCONNECT} 事件中禁用的相关 UI 元素\n       * @event Realtime#RECONNECT\n       */\n\n      /**\n       * 客户端连接断开\n       * @event IMClient#DISCONNECT\n       * @see Realtime#event:DISCONNECT\n       * @since 3.2.0\n       */\n      /**\n       * 计划在一段时间后尝试重新连接\n       * @event IMClient#SCHEDULE\n       * @param {Number} attempt 尝试重连的次数\n       * @param {Number} delay 延迟的毫秒数\n       * @since 3.2.0\n       */\n      /**\n       * 正在尝试重新连接\n       * @event IMClient#RETRY\n       * @param {Number} attempt 尝试重连的次数\n       * @since 3.2.0\n       */\n\n      /**\n       * 客户端进入离线状态。\n       * 这通常意味着网络已断开，或者 {@link Realtime#pause} 被调用\n       * @event Realtime#OFFLINE\n       * @since 3.4.0\n       */\n      /**\n       * 客户端恢复在线状态\n       * 这通常意味着网络已恢复，或者 {@link Realtime#resume} 被调用\n       * @event Realtime#ONLINE\n       * @since 3.4.0\n       */\n      /**\n       * 进入离线状态。\n       * 这通常意味着网络已断开，或者 {@link Realtime#pause} 被调用\n       * @event IMClient#OFFLINE\n       * @since 3.4.0\n       */\n      /**\n       * 恢复在线状态\n       * 这通常意味着网络已恢复，或者 {@link Realtime#resume} 被调用\n       * @event IMClient#ONLINE\n       * @since 3.4.0\n       */\n\n      // event proxy\n      [DISCONNECT, RECONNECT, RETRY, SCHEDULE, OFFLINE, ONLINE].forEach(event =>\n        connection.on(event, (...payload) => {\n          debug(`${event} event emitted. %O`, payload);\n          this.emit(event, ...payload);\n          if (event !== RECONNECT) {\n            internal(this).clients.forEach(client => {\n              client.emit(event, ...payload);\n            });\n          }\n        })\n      );\n      // override handleClose\n      connection.handleClose = function handleClose(event) {\n        const isFatal = [\n          ErrorCode.APP_NOT_AVAILABLE,\n          ErrorCode.INVALID_LOGIN,\n          ErrorCode.INVALID_ORIGIN,\n        ].some(errorCode => errorCode === event.code);\n        if (isFatal) {\n          // in these cases, SDK should throw.\n          this.throw(createError(event));\n        } else {\n          // reconnect\n          this.disconnect();\n        }\n      };\n      internal(this).connection = connection;\n    });\n\n    return this._openPromise;\n  }\n\n  async _getRTMServers(options) {\n    if (options.RTMServers) return shuffle(ensureArray(options.RTMServers));\n    let info;\n    const cachedEndPoints = this._cache.get('endpoints');\n    if (cachedEndPoints) {\n      info = await cachedEndPoints;\n    } else {\n      info = await this.constructor._fetchRTMServers(options);\n      this._cache.set('endpoints', info, info.ttl * 1000);\n    }\n    debug('endpoint info: %O', info);\n    return [info.server, info.secondary];\n  }\n\n  static async _getServerUrls({ appId, region, server }) {\n    debug('fetch server urls');\n    if (server) {\n      if (typeof server !== 'string') return server;\n      return {\n        RTMRouter: server,\n        api: server,\n      };\n    }\n    switch (region) {\n      case 'cn': {\n        const cachedRouter = routerCache.get(appId);\n        if (cachedRouter) return cachedRouter;\n        return axios\n          .get('https://app-router.leancloud.cn/2/route', {\n            params: {\n              appId,\n            },\n            timeout: 20000,\n          })\n          .then(res => res.data)\n          .then(tap(debug))\n          .then(\n            ({ rtm_router_server: RTMRouter, api_server: api, ttl = 3600 }) => {\n              if (!RTMRouter) {\n                throw new Error('rtm router not exists');\n              }\n              const serverUrls = {\n                RTMRouter,\n                api,\n              };\n              routerCache.set(appId, serverUrls, ttl * 1000);\n              return serverUrls;\n            }\n          )\n          .catch(() => {\n            const id = appId.slice(0, 8).toLowerCase();\n            return {\n              RTMRouter: `${id}.rtm.lncld.net`,\n              api: `${id}.api.lncld.net`,\n            };\n          });\n      }\n      case 'us':\n        return {\n          RTMRouter: 'router-a0-push.leancloud.cn',\n          api: 'us-api.leancloud.cn',\n        };\n      default:\n        throw new Error(`Region [${region}] is not supported.`);\n    }\n  }\n\n  static _fetchRTMServers({ appId, region, ssl, server, RTMServerName }) {\n    debug('fetch endpoint info');\n    return this._getServerUrls({ appId, region, server })\n      .then(tap(debug))\n      .then(({ RTMRouter }) =>\n        axios\n          .get(`https://${RTMRouter}/v1/route`, {\n            params: {\n              appId,\n              secure: ssl,\n              features: isWeapp ? 'wechat' : undefined,\n              server: RTMServerName,\n              _t: Date.now(),\n            },\n            timeout: 20000,\n          })\n          .then(res => res.data)\n          .then(tap(debug))\n      );\n  }\n\n  _close() {\n    if (this._openPromise) {\n      this._openPromise.then(connection => connection.close());\n    }\n    delete this._openPromise;\n  }\n\n  /**\n   * 手动进行重连。\n   * SDK 在网络出现异常时会自动按照一定的时间间隔尝试重连，调用该方法会立即尝试重连并重置重连尝试计数器。\n   * 只能在 `SCHEDULE` 事件之后，`RETRY` 事件之前调用，如果当前网络正常或者正在进行重连，调用该方法会抛异常。\n   */\n  retry() {\n    const { connection } = internal(this);\n    if (!connection) {\n      throw new Error('no connection established');\n    }\n    if (connection.cannot('retry')) {\n      throw new Error(\n        `retrying not allowed when not disconnected. the connection is now ${\n          connection.current\n        }`\n      );\n    }\n    return connection.retry();\n  }\n  /**\n   * 暂停，使 SDK 进入离线状态。\n   * 你可以在网络断开、应用进入后台等时刻调用该方法让 SDK 进入离线状态，离线状态下不会尝试重连。\n   * 在浏览器中 SDK 会自动监听网络变化，因此无需手动调用该方法。\n   *\n   * @since 3.4.0\n   * @see Realtime#event:OFFLINE\n   */\n  pause() {\n    // 这个方法常常在网络断开、进入后台时被调用，此时 connection 可能没有建立或者已经 close。\n    // 因此不像 retry，这个方法应该尽可能 loose\n    const { connection } = internal(this);\n    if (!connection) return;\n    if (connection.can('pause')) connection.pause();\n  }\n  /**\n   * 恢复在线状态。\n   * 你可以在网络恢复、应用回到前台等时刻调用该方法让 SDK 恢复在线状态，恢复在线状态后 SDK 会开始尝试重连。\n   *\n   * @since 3.4.0\n   * @see Realtime#event:ONLINE\n   */\n  resume() {\n    // 与 pause 一样，这个方法应该尽可能 loose\n    const { connection } = internal(this);\n    if (!connection) return;\n    if (connection.can('resume')) connection.resume();\n  }\n\n  _registerPending(value) {\n    internal(this).pendingClients.add(value);\n  }\n\n  _deregisterPending(client) {\n    internal(this).pendingClients.delete(client);\n  }\n\n  _register(client) {\n    internal(this).clients.add(client);\n  }\n\n  _deregister(client) {\n    const _this = internal(this);\n    _this.clients.delete(client);\n    if (_this.clients.size + _this.pendingClients.size === 0) {\n      this._close();\n    }\n  }\n\n  _dispatchCommand(command) {\n    return applyDispatcher(this._plugins.beforeCommandDispatch, [\n      command,\n      this,\n    ]).then(shouldDispatch => {\n      // no plugin handled this command\n      if (shouldDispatch)\n        return debug('[WARN] Unexpected message received: %O', trim(command));\n      return false;\n    });\n  }\n}\n","// IMClient\nexport const INVITED = 'invited';\nexport const KICKED = 'kicked';\nexport const MEMBERS_JOINED = 'membersjoined';\nexport const MEMBERS_LEFT = 'membersleft';\nexport const MEMBER_INFO_UPDATED = 'memberinfoupdated';\nexport const BLOCKED = 'blocked';\nexport const UNBLOCKED = 'unblocked';\nexport const MEMBERS_BLOCKED = 'membersblocked';\nexport const MEMBERS_UNBLOCKED = 'membersunblocked';\nexport const MUTED = 'muted';\nexport const UNMUTED = 'unmuted';\nexport const MEMBERS_MUTED = 'membersmuted';\nexport const MEMBERS_UNMUTED = 'membersunmuted';\nexport const MESSAGE = 'message';\nexport const UNREAD_MESSAGES_COUNT_UPDATE = 'unreadmessagescountupdate';\nexport const CLOSE = 'close';\nexport const CONFLICT = 'conflict';\nexport const UNHANDLED_MESSAGE = 'unhandledmessage';\nexport const CONVERSATION_INFO_UPDATED = 'conversationinfoupdated';\n\n// Conversation\nexport const LAST_DELIVERED_AT_UPDATE = 'lastdeliveredatupdate';\nexport const LAST_READ_AT_UPDATE = 'lastreadatupdate';\nexport const MESSAGE_RECALL = 'messagerecall';\nexport const MESSAGE_UPDATE = 'messageupdate';\nexport const INFO_UPDATED = 'infoupdated';\n","import uuid from 'uuid/v4';\nimport { ensureArray, decodeDate, getTime } from '../utils';\n\n/**\n * 消息状态枚举\n * @enum {Symbol}\n * @since 3.2.0\n * @memberof module:leancloud-realtime\n */\nconst MessageStatus = {\n  /** 初始状态、未知状态 */\n  NONE: Symbol('none'),\n  /** 正在发送 */\n  SENDING: Symbol('sending'),\n  /** 已发送 */\n  SENT: Symbol('sent'),\n  /** 已送达 */\n  DELIVERED: Symbol('delivered'),\n  /** 发送失败 */\n  FAILED: Symbol('failed'),\n};\nObject.freeze(MessageStatus);\n\nconst rMessageStatus = {\n  [MessageStatus.NONE]: true,\n  [MessageStatus.SENDING]: true,\n  [MessageStatus.SENT]: true,\n  [MessageStatus.DELIVERED]: true,\n  [MessageStatus.READ]: true,\n  [MessageStatus.FAILED]: true,\n};\n\nexport { MessageStatus };\nexport default class Message {\n  /**\n   * @implements AVMessage\n   * @param  {Object|String|ArrayBuffer} content 消息内容\n   */\n  constructor(content) {\n    Object.assign(\n      this,\n      { content },\n      {\n        /**\n         * @type {String}\n         * @memberof Message#\n         */\n        id: uuid(),\n        /**\n         * 消息所在的 conversation id\n         * @memberof Message#\n         * @type {String?}\n         */\n        cid: null,\n        /**\n         * 消息发送时间\n         * @memberof Message#\n         * @type {Date}\n         */\n        timestamp: new Date(),\n        /**\n         * 消息发送者\n         * @memberof Message#\n         * @type {String}\n         */\n        from: undefined,\n        /**\n         * 消息提及的用户\n         * @since 4.0.0\n         * @memberof Message#\n         * @type {String[]}\n         */\n        mentionList: [],\n        /**\n         * 消息是否提及了所有人\n         * @since 4.0.0\n         * @memberof Message#\n         * @type {Boolean}\n         */\n        mentionedAll: false,\n        _mentioned: false,\n      }\n    );\n    this._setStatus(MessageStatus.NONE);\n  }\n\n  /**\n   * 将当前消息的内容序列化为 JSON 对象\n   * @private\n   * @return {Object}\n   */\n  getPayload() {\n    return this.content;\n  }\n\n  _toJSON() {\n    const {\n      id,\n      cid,\n      from,\n      timestamp,\n      deliveredAt,\n      updatedAt,\n      mentionList,\n      mentionedAll,\n      mentioned,\n    } = this;\n    return {\n      id,\n      cid,\n      from,\n      timestamp,\n      deliveredAt,\n      updatedAt,\n      mentionList,\n      mentionedAll,\n      mentioned,\n    };\n  }\n\n  /**\n   * 返回 JSON 格式的消息\n   * @return {Object} 返回值是一个 plain Object\n   */\n  toJSON() {\n    return {\n      ...this._toJSON(),\n      data: this.content,\n    };\n  }\n\n  /**\n   * 返回 JSON 格式的消息，与 toJSON 不同的是，该对象包含了完整的信息，可以通过 {@link IMClient#parseMessage} 反序列化。\n   * @return {Object} 返回值是一个 plain Object\n   * @since 4.0.0\n   */\n  toFullJSON() {\n    const {\n      content,\n      id,\n      cid,\n      from,\n      timestamp,\n      deliveredAt,\n      _updatedAt,\n      mentionList,\n      mentionedAll,\n    } = this;\n    return {\n      data: content,\n      id,\n      cid,\n      from,\n      timestamp: getTime(timestamp),\n      deliveredAt: getTime(deliveredAt),\n      updatedAt: getTime(_updatedAt),\n      mentionList,\n      mentionedAll,\n    };\n  }\n\n  /**\n   * 消息状态，值为 {@link module:leancloud-realtime.MessageStatus} 之一\n   * @type {Symbol}\n   * @readonly\n   * @since 3.2.0\n   */\n  get status() {\n    return this._status;\n  }\n\n  _setStatus(status) {\n    if (!rMessageStatus[status]) {\n      throw new Error('Invalid message status');\n    }\n    this._status = status;\n  }\n\n  get timestamp() {\n    return this._timestamp;\n  }\n  set timestamp(value) {\n    this._timestamp = decodeDate(value);\n  }\n\n  /**\n   * 消息送达时间\n   * @type {?Date}\n   */\n  get deliveredAt() {\n    return this._deliveredAt;\n  }\n  set deliveredAt(value) {\n    this._deliveredAt = decodeDate(value);\n  }\n\n  /**\n   * 消息修改或撤回时间，可以通过比较其与消息的 timestamp 是否相等判断消息是否被修改过或撤回过。\n   * @type {Date}\n   * @since 3.5.0\n   */\n  get updatedAt() {\n    return this._updatedAt || this.timestamp;\n  }\n  set updatedAt(value) {\n    this._updatedAt = decodeDate(value);\n  }\n\n  /**\n   * 当前用户是否在该消息中被提及\n   * @type {Boolean}\n   * @readonly\n   * @since 4.0.0\n   */\n  get mentioned() {\n    return this._mentioned;\n  }\n  _updateMentioned(client) {\n    this._mentioned =\n      this.from !== client &&\n      (this.mentionedAll || this.mentionList.indexOf(client) > -1);\n  }\n  /**\n   * 获取提及用户列表\n   * @since 4.0.0\n   * @return {String[]} 提及用户的 id 列表\n   */\n  getMentionList() {\n    return this.mentionList;\n  }\n  /**\n   * 设置提及用户列表\n   * @since 4.0.0\n   * @param {String[]} clients 提及用户的 id 列表\n   * @return {this} self\n   */\n  setMentionList(clients) {\n    this.mentionList = ensureArray(clients);\n    return this;\n  }\n  /**\n   * 设置是否提及所有人\n   * @since 4.0.0\n   * @param {Boolean} [value=true]\n   * @return {this} self\n   */\n  mentionAll(value = true) {\n    this.mentionedAll = Boolean(value);\n    return this;\n  }\n\n  /**\n   * 判断给定的内容是否是有效的 Message，\n   * 该方法始终返回 true\n   * @private\n   * @returns {Boolean}\n   * @implements AVMessage.validate\n   */\n  static validate() {\n    return true;\n  }\n\n  /**\n   * 解析处理消息内容\n   * <pre>\n   * 如果子类提供了 message，返回该 message\n   * 如果没有提供，将 json 作为 content 实例化一个 Message\n   * @private\n   * @param  {Object}  json    json 格式的消息内容\n   * @param  {Message} message 子类提供的 message\n   * @return {Message}\n   * @implements AVMessage.parse\n   */\n  static parse(json, message) {\n    return message || new this(json);\n  }\n}\n","/* eslint-disable no-param-reassign */\nimport { getStaticProperty, isIE10 } from '../utils';\n\n// documented in ../index.js\nexport const messageType = type => {\n  if (typeof type !== 'number') {\n    throw new TypeError(`${type} is not a Number`);\n  }\n  return target => {\n    target.TYPE = type;\n    target.validate = json => json._lctype === type;\n    target.prototype._getType = () => ({ _lctype: type });\n  };\n};\n\n// documented in ../index.js\nexport const messageField = fields => {\n  if (typeof fields !== 'string') {\n    if (!Array.isArray(fields)) {\n      throw new TypeError(`${fields} is not an Array`);\n    } else if (fields.some(value => typeof value !== 'string')) {\n      throw new TypeError('fields contains non-string typed member');\n    }\n  }\n  return target => {\n    // IE10 Hack:\n    // static properties in IE10 will not be inherited from super\n    // search for parse method and assign it manually\n    let originalCustomFields = isIE10\n      ? getStaticProperty(target, '_customFields')\n      : target._customFields;\n    originalCustomFields = Array.isArray(originalCustomFields)\n      ? originalCustomFields\n      : [];\n    target._customFields = originalCustomFields.concat(fields);\n  };\n};\n\n// IE10 Hack:\n// static properties in IE10 will not be inherited from super\n// search for parse method and assign it manually\n\nexport const IE10Compatible = target => {\n  if (isIE10) {\n    target.parse = getStaticProperty(target, 'parse');\n  }\n};\n","import Message from './message';\nimport { messageField } from './helpers';\nimport { getStaticProperty, isIE10, compact } from '../utils';\n\n// jsdoc-ignore-start\n@messageField(['_lctext', '_lcattrs'])\n// jsdoc-ignore-end\n/**\n * 所有内置的富媒体消息均继承自本类\n * @extends Message\n */\nclass TypedMessage extends Message {\n  /**\n   * @type {Number}\n   * @readonly\n   */\n  get type() {\n    return this.constructor.TYPE;\n  }\n\n  /** @type {String} */\n  set text(text) {\n    return this.setText(text);\n  }\n  get text() {\n    return this.getText();\n  }\n\n  /** @type {Object} */\n  set attributes(attributes) {\n    return this.setAttributes(attributes);\n  }\n  get attributes() {\n    return this.getAttributes();\n  }\n\n  /**\n   * 在客户端需要以文本形式展示该消息时显示的文案，\n   * 如 <code>[红包] 新春快乐</code>。\n   * 默认值为消息的 text。\n   * @type {String}\n   * @readonly\n   */\n  get summary() {\n    return this.text;\n  }\n\n  /**\n   * @param {String} text\n   * @return {this} self\n   */\n  setText(text) {\n    this._lctext = text;\n    return this;\n  }\n  /**\n   * @return {String}\n   */\n  getText() {\n    return this._lctext;\n  }\n\n  /**\n   * @param {Object} attributes\n   * @return {this} self\n   */\n  setAttributes(attributes) {\n    this._lcattrs = attributes;\n    return this;\n  }\n  /**\n   * @return {Object}\n   */\n  getAttributes() {\n    return this._lcattrs;\n  }\n\n  _getCustomFields() {\n    const fields = Array.isArray(this.constructor._customFields)\n      ? this.constructor._customFields\n      : [];\n    return fields.reduce((result, field) => {\n      if (typeof field !== 'string') return result;\n      result[field] = this[field]; // eslint-disable-line no-param-reassign\n      return result;\n    }, {});\n  }\n\n  /* eslint-disable class-methods-use-this */\n  _getType() {\n    throw new Error('not implemented');\n  }\n  /* eslint-enable class-methods-use-this */\n\n  getPayload() {\n    return compact(\n      Object.assign(\n        {\n          _lctext: this.getText(),\n          _lcattrs: this.getAttributes(),\n        },\n        this._getCustomFields(),\n        this._getType()\n      )\n    );\n  }\n\n  toJSON() {\n    const { type, text, attributes, summary } = this;\n    return {\n      ...super._toJSON(),\n      type,\n      text,\n      attributes,\n      summary,\n    };\n  }\n\n  toFullJSON() {\n    return {\n      ...super.toFullJSON(),\n      data: this.getPayload(),\n    };\n  }\n\n  /**\n   * 解析处理消息内容\n   * <pre>\n   * 为给定的 message 设置 text 与 attributes 属性，返回该 message\n   * 如果子类没有提供 message，new this()\n   * @protected\n   * @param  {Object}  json    json 格式的消息内容\n   * @param  {TypedMessage} message 子类提供的 message\n   * @return {TypedMessage}\n   * @implements AVMessage.parse\n   */\n  static parse(json, message = new this()) {\n    message.content = json; // eslint-disable-line no-param-reassign\n    const customFields = isIE10\n      ? getStaticProperty(message.constructor, '_customFields')\n      : message.constructor._customFields;\n    let fields = Array.isArray(customFields) ? customFields : [];\n    fields = fields.reduce((result, field) => {\n      if (typeof field !== 'string') return result;\n      result[field] = json[field]; // eslint-disable-line no-param-reassign\n      return result;\n    }, {});\n    Object.assign(message, fields);\n    return super.parse(json, message);\n  }\n}\n\nexport default TypedMessage;\n","import TypedMessage from './typed-message';\nimport { messageType } from './helpers';\n\n// jsdoc-ignore-start\n@messageType(-127)\n// jsdoc-ignore-end\n/**\n * 已撤回类型消息，当消息被撤回时，SDK 会使用该类型的消息替代原始消息\n * @extends TypedMessage\n */\nclass RecalledMessage extends TypedMessage {\n  /**\n   * 在客户端需要以文本形式展示该消息时显示的文案，值为 <code>[该消息已撤回]</code>\n   * @type {String}\n   * @readonly\n   */\n  // eslint-disable-next-line class-methods-use-this\n  get summary() {\n    return '[该消息已撤回]';\n  }\n}\nexport default RecalledMessage;\n","import EventEmitter from 'eventemitter3';\nimport d from 'debug';\nimport { decodeDate, getTime, internal } from '../utils';\nimport { applyDecorators } from '../plugin';\nimport IMClient from '../im-client';\nimport {\n  GenericCommand,\n  ConvCommand,\n  DirectCommand,\n  LogsCommand,\n  PatchCommand,\n  PatchItem,\n  CommandType,\n  OpType,\n} from '../../proto/message';\nimport * as Event from '../events/im';\nimport { createError } from '../error';\nimport Message, { MessageStatus } from '../messages/message';\nimport RecalledMessage from '../messages/recalled-message';\n\nconst debug = d('LC:Conversation');\n\nconst serializeMessage = message => {\n  const content = message.getPayload();\n  let msg;\n  let binaryMsg;\n  if (content instanceof ArrayBuffer) {\n    binaryMsg = content;\n  } else if (typeof content !== 'string') {\n    msg = JSON.stringify(content);\n  } else {\n    msg = content;\n  }\n  return { msg, binaryMsg };\n};\n\nconst { NEW, OLD } = LogsCommand.QueryDirection;\n\n/**\n * 历史消息查询方向枚举\n * @enum {Number}\n * @since 4.0.0\n * @memberof module:leancloud-realtime\n */\nconst MessageQueryDirection = {\n  /** 从后向前 */\n  NEW_TO_OLD: OLD,\n  /** 从前向后 */\n  OLD_TO_NEW: NEW,\n};\nObject.freeze(MessageQueryDirection);\n\nexport { MessageQueryDirection };\n\nexport default class ConversationBase extends EventEmitter {\n  /**\n   * @extends EventEmitter\n   * @private\n   * @abstract\n   */\n  constructor(\n    {\n      id,\n      lastMessageAt,\n      lastMessage,\n      lastDeliveredAt,\n      lastReadAt,\n      unreadMessagesCount = 0,\n      members = [],\n      mentioned = false,\n      ...properties\n    },\n    client\n  ) {\n    super();\n    Object.assign(this, {\n      /**\n       * 对话 id，对应 _Conversation 表中的 objectId\n       * @memberof ConversationBase#\n       * @type {String}\n       */\n      id,\n      /**\n       * 最后一条消息时间\n       * @memberof ConversationBase#\n       * @type {?Date}\n       */\n      lastMessageAt,\n      /**\n       * 最后一条消息\n       * @memberof ConversationBase#\n       * @type {?Message}\n       */\n      lastMessage,\n      /**\n       * 参与该对话的用户列表\n       * @memberof ConversationBase#\n       * @type {String[]}\n       */\n      members,\n      // other properties provided by subclasses\n      ...properties,\n    });\n    this.members = Array.from(new Set(this.members));\n    Object.assign(internal(this), {\n      messagesWaitingForReceipt: {},\n      lastDeliveredAt,\n      lastReadAt,\n      unreadMessagesCount,\n      mentioned,\n    });\n    if (client instanceof IMClient) {\n      this._client = client;\n    } else {\n      throw new TypeError('Conversation must be initialized with a client');\n    }\n    if (debug.enabled) {\n      Object.values(Event).forEach(event =>\n        this.on(event, (...payload) =>\n          this._debug(`${event} event emitted. %O`, payload)\n        )\n      );\n    }\n    // onConversationCreate hook\n    applyDecorators(this._client._plugins.onConversationCreate, this);\n  }\n\n  /**\n   * 当前用户是否在该对话的未读消息中被提及\n   * @type {Boolean}\n   * @since 4.0.0\n   */\n  get unreadMessagesMentioned() {\n    return internal(this).unreadMessagesMentioned;\n  }\n  _setUnreadMessagesMentioned(value) {\n    internal(this).unreadMessagesMentioned = Boolean(value);\n  }\n\n  set unreadMessagesCount(value) {\n    if (value !== this.unreadMessagesCount) {\n      internal(this).unreadMessagesCount = value;\n      this._client.emit(Event.UNREAD_MESSAGES_COUNT_UPDATE, [this]);\n    }\n  }\n  /**\n   * 当前用户在该对话的未读消息数\n   * @type {Number}\n   */\n  get unreadMessagesCount() {\n    return internal(this).unreadMessagesCount;\n  }\n\n  set lastMessageAt(value) {\n    const time = decodeDate(value);\n    if (time <= this._lastMessageAt) return;\n    this._lastMessageAt = time;\n  }\n  get lastMessageAt() {\n    return this._lastMessageAt;\n  }\n  /**\n   * 最后消息送达时间，常用来实现消息的「已送达」标记，可通过 {@link Conversation#fetchReceiptTimestamps} 获取或更新该属性\n   * @type {?Date}\n   * @since 3.4.0\n   */\n  get lastDeliveredAt() {\n    if (this.members.length !== 2) return null;\n    return internal(this).lastDeliveredAt;\n  }\n  _setLastDeliveredAt(value) {\n    const date = decodeDate(value);\n    if (!(date < internal(this).lastDeliveredAt)) {\n      internal(this).lastDeliveredAt = date;\n      /**\n       * 最后消息送达时间更新\n       * @event ConversationBase#LAST_DELIVERED_AT_UPDATE\n       * @since 3.4.0\n       */\n      this.emit(Event.LAST_DELIVERED_AT_UPDATE);\n    }\n  }\n  /**\n   * 最后消息被阅读时间，常用来实现发送消息的「已读」标记，可通过 {@link Conversation#fetchReceiptTimestamps} 获取或更新该属性\n   * @type {?Date}\n   * @since 3.4.0\n   */\n  get lastReadAt() {\n    if (this.members.length !== 2) return null;\n    return internal(this).lastReadAt;\n  }\n  _setLastReadAt(value) {\n    const date = decodeDate(value);\n    if (!(date < internal(this).lastReadAt)) {\n      internal(this).lastReadAt = date;\n      /**\n       * 最后消息被阅读时间更新\n       * @event ConversationBase#LAST_READ_AT_UPDATE\n       * @since 3.4.0\n       */\n      this.emit(Event.LAST_READ_AT_UPDATE);\n    }\n  }\n\n  /**\n   * 返回 JSON 格式的对话，与 toJSON 不同的是，该对象包含了完整的信息，可以通过 {@link IMClient#parseConversation} 反序列化。\n   * @return {Object} 返回值是一个 plain Object\n   * @since 4.0.0\n   */\n  toFullJSON() {\n    const {\n      id,\n      members,\n      lastMessageAt,\n      lastDeliveredAt,\n      lastReadAt,\n      lastMessage,\n      unreadMessagesCount,\n    } = this;\n    return {\n      id,\n      members,\n      lastMessageAt: getTime(lastMessageAt),\n      lastDeliveredAt: getTime(lastDeliveredAt),\n      lastReadAt: getTime(lastReadAt),\n      lastMessage: lastMessage ? lastMessage.toFullJSON() : undefined,\n      unreadMessagesCount,\n    };\n  }\n\n  /**\n   * 返回 JSON 格式的对话\n   * @return {Object} 返回值是一个 plain Object\n   * @since 4.0.0\n   */\n  toJSON() {\n    const {\n      id,\n      members,\n      lastMessageAt,\n      lastDeliveredAt,\n      lastReadAt,\n      lastMessage,\n      unreadMessagesCount,\n      unreadMessagesMentioned,\n    } = this;\n    return {\n      id,\n      members,\n      lastMessageAt,\n      lastDeliveredAt,\n      lastReadAt,\n      lastMessage: lastMessage ? lastMessage.toJSON() : undefined,\n      unreadMessagesCount,\n      unreadMessagesMentioned,\n    };\n  }\n\n  _debug(...params) {\n    debug(...params, `[${this.id}]`);\n  }\n\n  _send(command, ...args) {\n    /* eslint-disable no-param-reassign */\n    if (command.cmd === null) {\n      command.cmd = 'conv';\n    }\n    if (command.cmd === 'conv' && command.convMessage === null) {\n      command.convMessage = new ConvCommand();\n    }\n    if (command.convMessage && command.convMessage.cid === null) {\n      command.convMessage.cid = this.id;\n    }\n    /* eslint-enable no-param-reassign */\n    return this._client._send(command, ...args);\n  }\n\n  /**\n   * 发送消息\n   * @param  {Message} message 消息，Message 及其子类的实例\n   * @param {Object} [options] since v3.3.0，发送选项\n   * @param {Boolean} [options.transient] since v3.3.1，是否作为暂态消息发送\n   * @param {Boolean} [options.receipt] 是否需要回执，仅在普通对话中有效\n   * @param {Boolean} [options.will] since v3.4.0，是否指定该消息作为「掉线消息」发送，\n   * 「掉线消息」会延迟到当前用户掉线后发送，常用来实现「下线通知」功能\n   * @param {MessagePriority} [options.priority] 消息优先级，仅在暂态对话中有效，\n   * see: {@link module:leancloud-realtime.MessagePriority MessagePriority}\n   * @param {Object} [options.pushData] 消息对应的离线推送内容，如果消息接收方不在线，会推送指定的内容。其结构说明参见: {@link https://url.leanapp.cn/pushData 推送消息内容}\n   * @return {Promise.<Message>} 发送的消息\n   */\n  async send(message, options) {\n    this._debug(message, 'send');\n    if (!(message instanceof Message)) {\n      throw new TypeError(`${message} is not a Message`);\n    }\n    const { transient, receipt, priority, pushData, will } = Object.assign(\n      {},\n      // support Message static property: sendOptions\n      message.constructor.sendOptions,\n      // support Message static property: getSendOptions\n      typeof message.constructor.getSendOptions === 'function'\n        ? message.constructor.getSendOptions(message)\n        : {},\n      options\n    );\n    if (receipt) {\n      if (this.transient) {\n        console.warn(\n          'receipt option is ignored as the conversation is transient.'\n        );\n      } else if (transient) {\n        console.warn(\n          'receipt option is ignored as the message is sent transiently.'\n        );\n      } else if (this.members.length > 2) {\n        console.warn(\n          'receipt option is recommended to be used in one-on-one conversation.'\n        ); // eslint-disable-line max-len\n      }\n    }\n    if (priority && !this.transient) {\n      console.warn(\n        'priority option is ignored as the conversation is not transient.'\n      );\n    }\n    Object.assign(message, {\n      cid: this.id,\n      from: this._client.id,\n    });\n    message._setStatus(MessageStatus.SENDING);\n    const { msg, binaryMsg } = serializeMessage(message);\n    const command = new GenericCommand({\n      cmd: 'direct',\n      directMessage: new DirectCommand({\n        msg,\n        binaryMsg,\n        cid: this.id,\n        r: receipt,\n        transient,\n        dt: message.id,\n        pushData: JSON.stringify(pushData),\n        will,\n        mentionPids: message.mentionList,\n        mentionAll: message.mentionedAll,\n      }),\n      priority,\n    });\n    try {\n      const resCommand = await this._send(command);\n      if (!transient) {\n        const { ackMessage: { uid, t, code, reason, appCode } } = resCommand;\n        if (code !== null) {\n          throw createError({\n            code,\n            reason,\n            appCode,\n          });\n        }\n        Object.assign(message, {\n          id: uid,\n          timestamp: t,\n        });\n        this.lastMessage = message;\n        this.lastMessageAt = message.timestamp;\n      }\n      message._setStatus(MessageStatus.SENT);\n      if (receipt) {\n        internal(this).messagesWaitingForReceipt[message.id] = message;\n      }\n      return message;\n    } catch (error) {\n      message._setStatus(MessageStatus.FAILED);\n      throw error;\n    }\n  }\n\n  async _update(message, newMessage, recall) {\n    this._debug('patch %O %O %O', message, newMessage, recall);\n    if (message instanceof Message) {\n      if (message.from !== this._client.id) {\n        throw new Error('Updating message from others is not allowed');\n      }\n      if (\n        message.status !== MessageStatus.SENT &&\n        message.status !== MessageStatus.DELIVERED\n      ) {\n        throw new Error('Message is not sent');\n      }\n    } else if (!(message.id && message.timestamp)) {\n      throw new TypeError(`${message} is not a Message`);\n    }\n    let msg;\n    let binaryMsg;\n    if (!recall) {\n      const content = serializeMessage(newMessage);\n      ({ msg, binaryMsg } = content);\n    }\n    await this._send(\n      new GenericCommand({\n        cmd: CommandType.patch,\n        op: OpType.modify,\n        patchMessage: new PatchCommand({\n          patches: [\n            new PatchItem({\n              cid: this.id,\n              mid: message.id,\n              timestamp: Number(message.timestamp),\n              recall,\n              data: msg,\n              binaryMsg,\n              mentionPids: newMessage.mentionList,\n              mentionAll: newMessage.mentionedAll,\n            }),\n          ],\n          lastPatchTime: this._client._lastPatchTime,\n        }),\n      })\n    );\n    const { id, cid, timestamp, from, _status } = message;\n    Object.assign(newMessage, {\n      id,\n      cid,\n      timestamp,\n      from,\n      _status,\n    });\n    if (this.lastMessage.id === newMessage.id) {\n      this.lastMessage = newMessage;\n    }\n    return newMessage;\n  }\n\n  /**\n   * 获取对话人数，或暂态对话的在线人数\n   * @return {Promise.<Number>}\n   */\n  async count() {\n    this._debug('count');\n    const resCommand = await this._send(\n      new GenericCommand({\n        op: 'count',\n      })\n    );\n    return resCommand.convMessage.count;\n  }\n\n  /**\n   * 修改已发送的消息\n   * @param {AVMessage} message 要修改的消息，该消息必须是由当前用户发送的。也可以提供一个包含消息 {id, timestamp} 的对象\n   * @param {AVMessage} newMessage 新的消息\n   * @return {Promise.<AVMessage>} 更新后的消息\n   */\n  async update(message, newMessage) {\n    if (!(newMessage instanceof Message)) {\n      throw new TypeError(`${newMessage} is not a Message`);\n    }\n    return this._update(message, newMessage, false);\n  }\n\n  /**\n   * 撤回已发送的消息\n   * @param {AVMessage} message 要撤回的消息，该消息必须是由当前用户发送的。也可以提供一个包含消息 {id, timestamp} 的对象\n   * @return {Promise.<RecalledMessage>} 一条已撤回的消息\n   */\n  async recall(message) {\n    return this._update(message, new RecalledMessage(), true);\n  }\n\n  /**\n   * 查询消息记录\n   * 如果仅需实现消息向前记录翻页查询需求，建议使用 {@link Conversation#createMessagesIterator}。\n   * 不论何种方向，获得的消息都是按照时间升序排列的。\n   * startClosed 与 endClosed 用于指定查询区间的开闭。\n   *\n   * @param  {Object} [options]\n   * @param  {Number} [options.limit] 限制查询结果的数量，目前服务端默认为 20\n   * @param  {Number}   [options.type] 指定查询的富媒体消息类型，不指定则查询所有消息。\n   * @param  {MessageQueryDirection} [options.direction] 查询的方向。\n   * 在不指定的情况下如果 startTime 大于 endTime，则为从新到旧查询，可以实现加载聊天记录等场景。\n   * 如果 startTime 小于 endTime，则为从旧到新查询，可以实现弹幕等场景。\n   * @param  {Date}   [options.startTime] 从该时间开始查询，不传则从当前时间开始查询\n   * @param  {String} [options.startMessageId] 从该消息之前开始查询，需要与 startTime 同时使用，为防止某时刻有重复消息\n   * @param  {Boolean}[options.startClosed] 指定查询范围是否包括开始的时间点，默认不包括\n   * @param  {Date}   [options.endTime] 查询到该时间为止，不传则查询最早消息为止\n   * @param  {String} [options.endMessageId] 查询到该消息为止，需要与 endTime 同时使用，为防止某时刻有重复消息\n   * @param  {Boolean}[options.endClosed] 指定查询范围是否包括结束的时间点，默认不包括\n   *\n   * @param  {Date}   [options.beforeTime] DEPRECATED: 使用 startTime 代替。限制查询结果为小于该时间之前的消息，不传则为当前时间\n   * @param  {String} [options.beforeMessageId] DEPRECATED: 使用 startMessageId 代替。\n   * 限制查询结果为该消息之前的消息，需要与 beforeTime 同时使用，为防止某时刻有重复消息\n   * @param  {Date}   [options.afterTime] DEPRECATED: 使用 endTime 代替。限制查询结果为大于该时间之前的消息\n   * @param  {String} [options.afterMessageId] DEPRECATED: 使用 endMessageId 代替。\n   * 限制查询结果为该消息之后的消息，需要与 afterTime 同时使用，为防止某时刻有重复消息\n   * @return {Promise.<Message[]>} 消息列表\n   */\n  async queryMessages(options = {}) {\n    this._debug('query messages %O', options);\n    const {\n      beforeTime,\n      beforeMessageId,\n      afterTime,\n      afterMessageId,\n      limit,\n      direction,\n      type,\n      startTime,\n      startMessageId,\n      startClosed,\n      endTime,\n      endMessageId,\n      endClosed,\n    } = options;\n    if (beforeMessageId || beforeTime || afterMessageId || afterTime) {\n      console.log(\n        'DEPRECATION: queryMessages options beforeTime, beforeMessageId, afterTime and afterMessageId are deprecated in favor of startTime, startMessageId, endTime and endMessageId.'\n      );\n      return this.queryMessages({\n        startTime: beforeTime,\n        startMessageId: beforeMessageId,\n        endTime: afterTime,\n        endMessageId: afterMessageId,\n        limit,\n      });\n    }\n    if (startMessageId && !startTime) {\n      throw new Error(\n        'query option startMessageId must be used with option startTime'\n      );\n    }\n    if (endMessageId && !endTime) {\n      throw new Error(\n        'query option endMessageId must be used with option endTime'\n      );\n    }\n    const conditions = {\n      t: startTime,\n      mid: startMessageId,\n      tIncluded: startClosed,\n      tt: endTime,\n      tmid: endMessageId,\n      ttIncluded: endClosed,\n      l: limit,\n      lctype: type,\n    };\n    if (conditions.t instanceof Date) {\n      conditions.t = conditions.t.getTime();\n    }\n    if (conditions.tt instanceof Date) {\n      conditions.tt = conditions.tt.getTime();\n    }\n    if (direction !== undefined) {\n      conditions.direction = direction;\n    } else if (conditions.tt > conditions.t) {\n      conditions.direction = MessageQueryDirection.OLD_TO_NEW;\n    }\n    const resCommand = await this._send(\n      new GenericCommand({\n        cmd: 'logs',\n        logsMessage: new LogsCommand(\n          Object.assign(conditions, {\n            cid: this.id,\n          })\n        ),\n      })\n    );\n    return Promise.all(\n      resCommand.logsMessage.logs.map(\n        async ({\n          msgId,\n          timestamp,\n          patchTimestamp,\n          from,\n          ackAt,\n          readAt,\n          data,\n          mentionAll,\n          mentionPids,\n          bin,\n        }) => {\n          const messageData = {\n            data,\n            bin,\n            id: msgId,\n            cid: this.id,\n            timestamp,\n            from,\n            deliveredAt: ackAt,\n            updatedAt: patchTimestamp,\n            mentionList: mentionPids,\n            mentionedAll: mentionAll,\n          };\n          const message = await this._client.parseMessage(messageData);\n          let status = MessageStatus.SENT;\n          if (this.members.length === 2) {\n            if (ackAt) status = MessageStatus.DELIVERED;\n            if (ackAt) this._setLastDeliveredAt(ackAt);\n            if (readAt) this._setLastReadAt(readAt);\n          }\n          message._setStatus(status);\n          return message;\n        }\n      )\n    );\n  }\n\n  /**\n   * 获取消息翻页迭代器\n   * @param  {Object} [options]\n   * @param  {Date}   [options.beforeTime] 限制起始查询结果为小于该时间之前的消息，不传则为当前时间\n   * @param  {String} [options.beforeMessageId] 限制起始查询结果为该消息之前的消息，需要与 beforeTime 同时使用，为防止某时刻有重复消息\n   * @param  {Number} [options.limit] 限制每页查询结果的数量，目前服务端默认为 20\n   * @return {AsyncIterater.<Promise.<IteratorResult<Message[]>>>} [AsyncIterator]{@link https://github.com/tc39/proposal-async-iteration}，调用其 next 方法返回获取下一页消息的 Promise\n   * @example\n   * var messageIterator = conversation.createMessagesIterator({ limit: 10 });\n   * messageIterator.next().then(function(result) {\n   *   // result: {\n   *   //   value: [message1, ..., message10],\n   *   //   done: false,\n   *   // }\n   * });\n   * messageIterator.next().then(function(result) {\n   *   // result: {\n   *   //   value: [message11, ..., message20],\n   *   //   done: false,\n   *   // }\n   * });\n   * messageIterator.next().then(function(result) {\n   *   // No more messages\n   *   // result: { value: [], done: true }\n   * });\n   */\n  createMessagesIterator({ beforeTime, beforeMessageId, limit } = {}) {\n    let promise;\n    return {\n      next: () => {\n        if (promise === undefined) {\n          // first call\n          promise = this.queryMessages({\n            limit,\n            startTime: beforeTime,\n            startMessageId: beforeMessageId,\n          });\n        } else {\n          promise = promise.then(prevMessages => {\n            if (prevMessages.length === 0 || prevMessages.length < limit) {\n              // no more messages\n              return [];\n            }\n            return this.queryMessages({\n              startTime: prevMessages[0].timestamp,\n              startMessageId: prevMessages[0].id,\n              limit,\n            });\n          });\n        }\n        return promise.then(value => ({\n          value: Array.from(value),\n          done: value.length === 0 || value.length < limit,\n        }));\n      },\n    };\n  }\n\n  /**\n   * 将该会话标记为已读\n   * @return {Promise.<this>} self\n   */\n  async read() {\n    this.unreadMessagesCount = 0;\n    this._setUnreadMessagesMentioned(false);\n    // 跳过暂态会话\n    if (this.transient) return this;\n    const client = this._client;\n    if (!internal(client).readConversationsBuffer) {\n      internal(client).readConversationsBuffer = new Set();\n    }\n    internal(client).readConversationsBuffer.add(this);\n    client._doSendRead();\n    return this;\n  }\n\n  _handleReceipt({ messageId, timestamp, read }) {\n    if (read) {\n      this._setLastReadAt(timestamp);\n    } else {\n      this._setLastDeliveredAt(timestamp);\n    }\n    const { messagesWaitingForReceipt } = internal(this);\n    const message = messagesWaitingForReceipt[messageId];\n    if (!message) return;\n    message._setStatus(MessageStatus.DELIVERED);\n    message.deliveredAt = timestamp;\n    delete messagesWaitingForReceipt[messageId];\n  }\n\n  /**\n   * 更新对话的最新回执时间戳（lastDeliveredAt、lastReadAt）\n   * @since 3.4.0\n   * @return {Promise.<this>} this\n   */\n  async fetchReceiptTimestamps() {\n    const {\n      convMessage: { maxReadTimestamp, maxAckTimestamp },\n    } = await this._send(\n      new GenericCommand({\n        op: 'max_read',\n      })\n    );\n    this._setLastDeliveredAt(maxAckTimestamp);\n    this._setLastReadAt(maxReadTimestamp);\n    return this;\n  }\n\n  _fetchAllReceiptTimestamps() {\n    const convMessage = new ConvCommand({\n      queryAllMembers: true,\n    });\n    return this._send(\n      new GenericCommand({\n        op: 'max_read',\n        convMessage,\n      })\n    ).then(({ convMessage: { maxReadTuples } }) =>\n      maxReadTuples\n        .filter(\n          maxReadTuple =>\n            maxReadTuple.maxAckTimestamp || maxReadTuple.maxReadTimestamp\n        )\n        .map(({ pid, maxAckTimestamp, maxReadTimestamp }) => ({\n          pid,\n          lastDeliveredAt: decodeDate(maxAckTimestamp),\n          lastReadAt: decodeDate(maxReadTimestamp),\n        }))\n    );\n  }\n}\n","import { internal } from './utils';\n\n/**\n * 对话成员角色枚举\n * @enum {String}\n * @since 4.0.0\n * @memberof module:leancloud-realtime\n */\nconst ConversationMemberRole = {\n  /** 管理员 */\n  MANAGER: 'Manager',\n  /** 成员 */\n  MEMBER: 'Member',\n};\nObject.freeze(ConversationMemberRole);\nexport { ConversationMemberRole };\n\nexport default class ConversationMemberInfo {\n  /**\n   * 对话成员属性，保存了成员与某个对话相关的属性，对应 _ConversationMemberInfo 表\n   * @since 4.0.0\n   */\n  constructor({ conversation, memberId, role }) {\n    if (!conversation) throw new Error('conversation requried');\n    if (!memberId) throw new Error('memberId requried');\n    Object.assign(internal(this), {\n      conversation,\n      memberId,\n      role,\n    });\n  }\n\n  /**\n   * 对话 Id\n   * @type {String}\n   * @readonly\n   */\n  get conversationId() {\n    return internal(this).conversation.id;\n  }\n  /**\n   * 成员 Id\n   * @type {String}\n   * @readonly\n   */\n  get memberId() {\n    return internal(this).memberId;\n  }\n  /**\n   * 角色\n   * @type {module:leancloud-realtime.ConversationMemberRole | String}\n   * @readonly\n   */\n  get role() {\n    return internal(this).role;\n  }\n  /**\n   * 是否是管理员\n   * @type {Boolean}\n   * @readonly\n   */\n  get isOwner() {\n    return this.memberId === internal(this).conversation.creator;\n  }\n\n  toJSON() {\n    const { conversationId, memberId, role, isOwner } = this;\n    return {\n      conversationId,\n      memberId,\n      role,\n      isOwner,\n    };\n  }\n}\n","import d from 'debug';\nimport { tap } from './utils';\n\nconst debug = d('LC:SignatureFactoryRunner');\n\nfunction _validateSignature(signatureResult = {}) {\n  const { signature, timestamp, nonce } = signatureResult;\n  if (\n    typeof signature !== 'string' ||\n    typeof timestamp !== 'number' ||\n    typeof nonce !== 'string'\n  ) {\n    throw new Error('malformed signature');\n  }\n  return {\n    signature,\n    timestamp,\n    nonce,\n  };\n}\n\nexport default (signatureFactory, params) =>\n  Promise.resolve()\n    .then(() => {\n      debug('call signatureFactory with %O', params);\n      return signatureFactory(...params);\n    })\n    .then(\n      tap(signatureResult => debug('sign result %O', signatureResult)),\n      error => {\n        // eslint-disable-next-line no-param-reassign\n        error.message = `sign error: ${error.message}`;\n        debug(error);\n        throw error;\n      }\n    )\n    .then(_validateSignature);\n","import isEmpty from 'lodash/isEmpty';\nimport cloneDeep from 'lodash/cloneDeep';\nimport ConversationBase from './conversation-base';\nimport ConversationMemberInfo, {\n  ConversationMemberRole,\n} from '../conversation-member-info';\nimport {\n  decodeDate,\n  getTime,\n  encode,\n  keyRemap,\n  union,\n  difference,\n  internal,\n  setValue,\n  ensureArray,\n} from '../utils';\nimport {\n  GenericCommand,\n  ConvCommand,\n  ConvMemberInfo,\n  JsonObjectMessage,\n  BlacklistCommand,\n  OpType,\n} from '../../proto/message';\nimport runSignatureFactory from '../signature-factory-runner';\nimport { createError } from '../error';\n\n/**\n * 部分失败异常\n * @typedef OperationFailureError\n * @type {Error}\n * @property {string} message 异常信息\n * @property {string[]} clientIds 因为该原因失败的 client id 列表\n * @property {number} [code] 错误码\n * @property {string} [detail] 详细信息\n */\n\n/**\n * 部分成功的结果\n * @typedef PartiallySuccess\n * @type {Object}\n * @property {string[]} successfulClientIds 成功的 client id 列表\n * @property {OperationFailureError[]} failures 失败的异常列表\n */\n\n/**\n * 分页查询结果\n * @typedef PagedResults\n * @type {Object}\n * @property {T[]} results 查询结果\n * @property {string} [next] 存在表示还有更多结果，在下次查询中带上可实现翻页。\n */\n\nconst createPartiallySuccess = ({ allowedPids, failedPids }) => ({\n  successfulClientIds: allowedPids,\n  failures: failedPids.map(({ pids, ...error }) =>\n    Object.assign(createError(error), { clientIds: pids })\n  ),\n});\n\n/**\n * @extends ConversationBase\n * @private\n * @abstract\n */\nclass PersistentConversation extends ConversationBase {\n  constructor(\n    data,\n    {\n      creator,\n      createdAt,\n      updatedAt,\n      transient = false,\n      system = false,\n      muted = false,\n      mutedMembers = [],\n      ...attributes\n    },\n    client\n  ) {\n    super(\n      {\n        ...data,\n        /**\n         * 对话创建者\n         * @memberof PersistentConversation#\n         * @type {String}\n         */\n        creator,\n        /**\n         * 对话创建时间\n         * @memberof PersistentConversation#\n         * @type {Date}\n         */\n        createdAt,\n        /**\n         * 对话更新时间\n         * @memberof PersistentConversation#\n         * @type {Date}\n         */\n        updatedAt,\n        /**\n         * 对该对话设置了静音的用户列表\n         * @memberof PersistentConversation#\n         * @type {?String[]}\n         */\n        mutedMembers,\n        /**\n         * 暂态对话标记\n         * @memberof PersistentConversation#\n         * @type {Boolean}\n         */\n        transient,\n        /**\n         * 系统对话标记\n         * @memberof PersistentConversation#\n         * @type {Boolean}\n         * @since 3.3.0\n         */\n        system,\n        /**\n         * 当前用户静音该对话标记\n         * @memberof PersistentConversation#\n         * @type {Boolean}\n         */\n        muted,\n        _attributes: attributes,\n      },\n      client\n    );\n    this._reset();\n  }\n\n  set createdAt(value) {\n    this._createdAt = decodeDate(value);\n  }\n  get createdAt() {\n    return this._createdAt;\n  }\n  set updatedAt(value) {\n    this._updatedAt = decodeDate(value);\n  }\n  get updatedAt() {\n    return this._updatedAt;\n  }\n\n  /**\n   * 对话名字，对应 _Conversation 表中的 name\n   * @type {String}\n   */\n  get name() {\n    return this.get('name');\n  }\n  set name(value) {\n    this.set('name', value);\n  }\n\n  /**\n   * 获取对话的自定义属性\n   * @since 3.2.0\n   * @param  {String} key key 属性的键名，'x' 对应 Conversation 表中的 x 列\n   * @return {Any} 属性的值\n   */\n  get(key) {\n    return internal(this).currentAttributes[key];\n  }\n\n  /**\n   * 设置对话的自定义属性\n   * @since 3.2.0\n   * @param {String} key 属性的键名，'x' 对应 Conversation 表中的 x 列，支持使用 'x.y.z' 来修改对象的部分字段。\n   * @param {Any} value 属性的值\n   * @return {this} self\n   * @example\n   *\n   * // 设置对话的 color 属性\n   * conversation.set('color', {\n   *   text: '#000',\n   *   background: '#DDD',\n   * });\n   * // 设置对话的 color.text 属性\n   * conversation.set('color.text', '#333');\n   */\n  set(key, value) {\n    this._debug(`set [${key}]: ${value}`);\n    const { pendingAttributes } = internal(this);\n    const pendingKeys = Object.keys(pendingAttributes);\n    // suppose pendingAttributes = { 'a.b': {} }\n    // set 'a' or 'a.b': delete 'a.b'\n    const re = new RegExp(`^${key}`);\n    const childKeys = pendingKeys.filter(re.test.bind(re));\n    childKeys.forEach(k => {\n      delete pendingAttributes[k];\n    });\n    if (childKeys.length) {\n      pendingAttributes[key] = value;\n    } else {\n      // set 'a.c': nothing to do\n      // set 'a.b.c.d': assign c: { d: {} } to 'a.b'\n      // CAUTION: non-standard API, provided by core-js\n      const parentKey = Array.find(pendingKeys, k => key.indexOf(k) === 0); // 'a.b'\n      if (parentKey) {\n        setValue(\n          pendingAttributes[parentKey],\n          key.slice(parentKey.length + 1),\n          value\n        );\n      } else {\n        pendingAttributes[key] = value;\n      }\n    }\n    this._buildCurrentAttributes();\n    return this;\n  }\n\n  _buildCurrentAttributes() {\n    const { pendingAttributes } = internal(this);\n    internal(this).currentAttributes = Object.keys(pendingAttributes).reduce(\n      (target, k) => setValue(target, k, pendingAttributes[k]),\n      cloneDeep(this._attributes)\n    );\n  }\n\n  _updateServerAttributes(attributes) {\n    Object.keys(attributes).forEach(key =>\n      setValue(this._attributes, key, attributes[key])\n    );\n    this._buildCurrentAttributes();\n  }\n\n  _reset() {\n    internal(this).pendingAttributes = {};\n    internal(this).currentAttributes = this._attributes;\n  }\n\n  /**\n   * 保存当前对话的属性至服务器\n   * @return {Promise.<this>} self\n   */\n  async save() {\n    this._debug('save');\n    const attr = internal(this).pendingAttributes;\n    if (isEmpty(attr)) {\n      this._debug('nothing touched, resolve with self');\n      return this;\n    }\n    this._debug('attr: %O', attr);\n    const convMessage = new ConvCommand({\n      attr: new JsonObjectMessage({\n        data: JSON.stringify(encode(attr)),\n      }),\n    });\n    const resCommand = await this._send(\n      new GenericCommand({\n        op: 'update',\n        convMessage,\n      })\n    );\n    this.updatedAt = resCommand.convMessage.udate;\n    this._attributes = internal(this).currentAttributes;\n    internal(this).pendingAttributes = {};\n    return this;\n  }\n\n  /**\n   * 从服务器更新对话的属性\n   * @return {Promise.<this>} self\n   */\n  async fetch() {\n    const query = this._client.getQuery().equalTo('objectId', this.id);\n    await query.find();\n    return this;\n  }\n\n  /**\n   * 静音，客户端拒绝收到服务器端的离线推送通知\n   * @return {Promise.<this>} self\n   */\n  async mute() {\n    this._debug('mute');\n    await this._send(\n      new GenericCommand({\n        op: 'mute',\n      })\n    );\n    if (!this.transient) {\n      this.muted = true;\n      this.mutedMembers = union(this.mutedMembers, [this._client.id]);\n    }\n    return this;\n  }\n\n  /**\n   * 取消静音\n   * @return {Promise.<this>} self\n   */\n  async unmute() {\n    this._debug('unmute');\n    await this._send(\n      new GenericCommand({\n        op: 'unmute',\n      })\n    );\n    if (!this.transient) {\n      this.muted = false;\n      this.mutedMembers = difference(this.mutedMembers, [this._client.id]);\n    }\n    return this;\n  }\n\n  async _appendConversationSignature(command, action, clientIds) {\n    if (this._client.options.conversationSignatureFactory) {\n      const params = [this.id, this._client.id, clientIds.sort(), action];\n      const signatureResult = await runSignatureFactory(\n        this._client.options.conversationSignatureFactory,\n        params\n      );\n      Object.assign(\n        command.convMessage,\n        keyRemap(\n          {\n            signature: 's',\n            timestamp: 't',\n            nonce: 'n',\n          },\n          signatureResult\n        )\n      );\n    }\n  }\n\n  async _appendBlacklistSignature(command, action, clientIds) {\n    if (this._client.options.blacklistSignatureFactory) {\n      const params = [this._client.id, this.id, clientIds.sort(), action];\n      const signatureResult = await runSignatureFactory(\n        this._client.options.blacklistSignatureFactory,\n        params\n      );\n      Object.assign(\n        command.blacklistMessage,\n        keyRemap(\n          {\n            signature: 's',\n            timestamp: 't',\n            nonce: 'n',\n          },\n          signatureResult\n        )\n      );\n    }\n  }\n\n  /**\n   * 增加成员\n   * @param {String|String[]} clientIds 新增成员 client id\n   * @return {Promise.<PartiallySuccess>} 部分成功结果，包含了成功的 id 列表、失败原因与对应的 id 列表\n   */\n  async add(clientIds) {\n    this._debug('add', clientIds);\n    if (typeof clientIds === 'string') {\n      clientIds = [clientIds]; // eslint-disable-line no-param-reassign\n    }\n    const command = new GenericCommand({\n      op: 'add',\n      convMessage: new ConvCommand({\n        m: clientIds,\n      }),\n    });\n    await this._appendConversationSignature(command, 'add', clientIds);\n    const { convMessage, convMessage: { allowedPids } } = await this._send(\n      command\n    );\n    if (!this.transient && !this.system) {\n      this.members = union(this.members, allowedPids);\n    }\n    return createPartiallySuccess(convMessage);\n  }\n\n  /**\n   * 剔除成员\n   * @param {String|String[]} clientIds 成员 client id\n   * @return {Promise.<PartiallySuccess>} 部分成功结果，包含了成功的 id 列表、失败原因与对应的 id 列表\n   */\n  async remove(clientIds) {\n    this._debug('remove', clientIds);\n    if (typeof clientIds === 'string') {\n      clientIds = [clientIds]; // eslint-disable-line no-param-reassign\n    }\n    const command = new GenericCommand({\n      op: 'remove',\n      convMessage: new ConvCommand({\n        m: clientIds,\n      }),\n    });\n    await this._appendConversationSignature(command, 'remove', clientIds);\n    const { convMessage, convMessage: { allowedPids } } = await this._send(\n      command\n    );\n    if (!this.transient && !this.system) {\n      this.members = difference(this.members, allowedPids);\n    }\n    return createPartiallySuccess(convMessage);\n  }\n\n  /**\n   * （当前用户）加入该对话\n   * @return {Promise.<this>} self\n   */\n  async join() {\n    this._debug('join');\n    return this.add(this._client.id).then(({ failures }) => {\n      if (failures[0]) throw failures[0];\n      return this;\n    });\n  }\n\n  /**\n   * （当前用户）退出该对话\n   * @return {Promise.<this>} self\n   */\n  async quit() {\n    this._debug('quit');\n    return this.remove(this._client.id).then(({ failures }) => {\n      if (failures[0]) throw failures[0];\n      return this;\n    });\n  }\n\n  /**\n   * 在该对话中禁言成员\n   * @param {String|String[]} clientIds 成员 client id\n   * @return {Promise.<PartiallySuccess>} 部分成功结果，包含了成功的 id 列表、失败原因与对应的 id 列表\n   */\n  async muteMembers(clientIds) {\n    this._debug('mute', clientIds);\n    clientIds = ensureArray(clientIds); // eslint-disable-line no-param-reassign\n    const command = new GenericCommand({\n      op: OpType.add_shutup,\n      convMessage: new ConvCommand({\n        m: clientIds,\n      }),\n    });\n    const { convMessage } = await this._send(command);\n    return createPartiallySuccess(convMessage);\n  }\n\n  /**\n   * 在该对话中解除成员禁言\n   * @param {String|String[]} clientIds 成员 client id\n   * @return {Promise.<PartiallySuccess>} 部分成功结果，包含了成功的 id 列表、失败原因与对应的 id 列表\n   */\n  async unmuteMembers(clientIds) {\n    this._debug('unmute', clientIds);\n    clientIds = ensureArray(clientIds); // eslint-disable-line no-param-reassign\n    const command = new GenericCommand({\n      op: OpType.remove_shutup,\n      convMessage: new ConvCommand({\n        m: clientIds,\n      }),\n    });\n    const { convMessage } = await this._send(command);\n    return createPartiallySuccess(convMessage);\n  }\n\n  /**\n   * 查询该对话禁言成员列表\n   * @param {Object} [options]\n   * @param {Number} [options.limit] 返回的成员数量，服务器默认值 10\n   * @param {String} [options.next] 从指定 next 开始查询，与 limit 一起使用可以完成翻页。\n   * @return {PagedResults.<string>} 查询结果。其中的 cureser 存在表示还有更多结果。\n   */\n  async queryMutedMembers({ limit, next } = {}) {\n    this._debug('query muted: limit %O, next: %O', limit, next);\n    const command = new GenericCommand({\n      op: OpType.query_shutup,\n      convMessage: new ConvCommand({\n        limit,\n        next,\n      }),\n    });\n    const { convMessage: { m, next: newNext } } = await this._send(command);\n    return {\n      results: m,\n      next: newNext,\n    };\n  }\n\n  /**\n   * 将用户加入该对话黑名单\n   * @param {String|String[]} clientIds 成员 client id\n   * @return {Promise.<PartiallySuccess>} 部分成功结果，包含了成功的 id 列表、失败原因与对应的 id 列表\n   */\n  async blockMembers(clientIds) {\n    this._debug('block', clientIds);\n    clientIds = ensureArray(clientIds); // eslint-disable-line no-param-reassign\n    const command = new GenericCommand({\n      cmd: 'blacklist',\n      op: OpType.block,\n      blacklistMessage: new BlacklistCommand({\n        srcCid: this.id,\n        toPids: clientIds,\n      }),\n    });\n    await this._appendBlacklistSignature(\n      command,\n      'conversation-block-clients',\n      clientIds\n    );\n    const { blacklistMessage } = await this._send(command);\n    return createPartiallySuccess(blacklistMessage);\n  }\n\n  /**\n   * 将用户移出该对话黑名单\n   * @param {String|String[]} clientIds 成员 client id\n   * @return {Promise.<PartiallySuccess>} 部分成功结果，包含了成功的 id 列表、失败原因与对应的 id 列表\n   */\n  async unblockMembers(clientIds) {\n    this._debug('unblock', clientIds);\n    clientIds = ensureArray(clientIds); // eslint-disable-line no-param-reassign\n    const command = new GenericCommand({\n      cmd: 'blacklist',\n      op: OpType.unblock,\n      blacklistMessage: new BlacklistCommand({\n        srcCid: this.id,\n        toPids: clientIds,\n      }),\n    });\n    await this._appendBlacklistSignature(\n      command,\n      'conversation-unblock-clients',\n      clientIds\n    );\n    const { blacklistMessage } = await this._send(command);\n    return createPartiallySuccess(blacklistMessage);\n  }\n\n  /**\n   * 查询该对话黑名单\n   * @param {Object} [options]\n   * @param {Number} [options.limit] 返回的成员数量，服务器默认值 10\n   * @param {String} [options.next] 从指定 next 开始查询，与 limit 一起使用可以完成翻页\n   * @return {PagedResults.<string>} 查询结果。其中的 cureser 存在表示还有更多结果。\n   */\n  async queryBlockedMembers({ limit, next } = {}) {\n    this._debug('query blocked: limit %O, next: %O', limit, next);\n    const command = new GenericCommand({\n      cmd: 'blacklist',\n      op: OpType.query,\n      blacklistMessage: new BlacklistCommand({\n        srcCid: this.id,\n        limit,\n        next,\n      }),\n    });\n    const {\n      blacklistMessage: { blockedPids, next: newNext },\n    } = await this._send(command);\n    return {\n      results: blockedPids,\n      next: newNext,\n    };\n  }\n\n  /**\n   * 获取所有成员的对话属性\n   * @since 4.0.0\n   * @return {Promise.<ConversationMemberInfo[]>} 所有成员的对话属性列表\n   */\n  async getAllMemberInfo() {\n    const response = await this._client._requestWithSessionToken({\n      method: 'GET',\n      path: '/classes/_ConversationMemberInfo',\n      query: {\n        where: { cid: this.id },\n      },\n    });\n    const memberInfos = response.results.map(\n      info =>\n        new ConversationMemberInfo({\n          conversation: this,\n          memberId: info.clientId,\n          role: info.role,\n        })\n    );\n    const memberInfoMap = {};\n    memberInfos.forEach(memberInfo => {\n      memberInfoMap[memberInfo.memberId] = memberInfo;\n    });\n    this.members.forEach(memberId => {\n      memberInfoMap[memberId] = new ConversationMemberInfo({\n        conversation: this,\n        memberId,\n        role: ConversationMemberRole.MEMBER,\n      });\n    });\n    internal(this).memberInfoMap = memberInfoMap;\n    return this.members.map(memberId => memberInfoMap[memberId]);\n  }\n\n  /**\n   * 获取指定成员的对话属性\n   * @since 4.0.0\n   * @return {Promise.<ConversationMemberInfo>} 指定成员的对话属性\n   */\n  async getMemberInfo(memberId) {\n    if (this.members.indexOf(memberId) === -1)\n      throw new Error(\n        `${memberId} is not the mumber of conversation[${this.id}]`\n      );\n    const { memberInfoMap } = internal(this);\n    if (!(memberInfoMap && memberInfoMap[memberId]))\n      await this.getAllMemberInfo();\n    return internal(this).memberInfoMap[memberId];\n  }\n\n  /**\n   * 更新指定用户的角色\n   * @since 4.0.0\n   * @param {String} memberId 成员 Id\n   * @param {module:leancloud-realtime.ConversationMemberRole | String} role 角色\n   * @return {Promise.<this>} self\n   */\n  async updateMemberRole(memberId, role) {\n    this._debug('mute');\n    await this._send(\n      new GenericCommand({\n        op: OpType.member_info_update,\n        convMessage: new ConvCommand({\n          targetClientId: memberId,\n          info: new ConvMemberInfo({\n            pid: memberId,\n            role,\n          }),\n        }),\n      })\n    );\n    const { memberInfos } = internal(this);\n    if (memberInfos && memberInfos[memberId]) {\n      internal(memberInfos[memberId]).role = role;\n    }\n    return this;\n  }\n\n  toFullJSON() {\n    const {\n      creator,\n      system,\n      transient,\n      createdAt,\n      updatedAt,\n      _attributes,\n    } = this;\n    return {\n      ...super.toFullJSON(),\n      creator,\n      system,\n      transient,\n      createdAt: getTime(createdAt),\n      updatedAt: getTime(updatedAt),\n      ..._attributes,\n    };\n  }\n\n  toJSON() {\n    const {\n      creator,\n      system,\n      transient,\n      muted,\n      mutedMembers,\n      createdAt,\n      updatedAt,\n      _attributes,\n    } = this;\n    return {\n      ...super.toJSON(),\n      creator,\n      system,\n      transient,\n      muted,\n      mutedMembers,\n      createdAt,\n      updatedAt,\n      ..._attributes,\n    };\n  }\n}\n\nexport default PersistentConversation;\n","import PersistentConversation from './persistent-conversation';\n\n/**\n * 普通对话\n *\n * 无法直接实例化，请使用 {@link IMClient#createConversation} 创建新的普通对话。\n * @extends PersistentConversation\n * @public\n */\nclass Conversation extends PersistentConversation {}\n\nexport default Conversation;\n","import PersistentConversation from './persistent-conversation';\n\n/**\n * 聊天室。\n *\n * 无法直接实例化，请使用 {@link IMClient#createChatRoom} 创建新的聊天室。\n * @since 4.0.0\n * @extends PersistentConversation\n * @public\n */\nclass ChatRoom extends PersistentConversation {}\n\nexport default ChatRoom;\n","import PersistentConversation from './persistent-conversation';\n\n/**\n * 服务号。\n *\n * 服务号不支持在客户端创建。\n * @since 4.0.0\n * @extends PersistentConversation\n * @public\n */\nclass ServiceConversation extends PersistentConversation {\n  /**\n   * 订阅该服务号\n   * @return {Promise.<this>} self\n   */\n  async subscribe() {\n    return this.join();\n  }\n\n  /**\n   * 退订该服务号\n   * @return {Promise.<this>} self\n   */\n  async unsubscribe() {\n    return this.quit();\n  }\n}\n\nexport default ServiceConversation;\n","import ConversationBase from './conversation-base';\nimport { createError, ErrorCode } from '../error';\nimport { decodeDate, getTime } from '../utils';\n\nconst transformNotFoundError = error =>\n  error.code === ErrorCode.CONVERSATION_NOT_FOUND\n    ? createError({ code: ErrorCode.CONVERSATION_EXPIRED })\n    : error;\n\n/**\n * 临时对话\n * @since 4.0.0\n * @extends ConversationBase\n * @public\n */\nclass TemporaryConversation extends ConversationBase {\n  /**\n   * 无法直接实例化，请使用 {@link IMClient#createTemporaryConversation} 创建新的临时对话。\n   */\n  constructor(data, { expiredAt }, client) {\n    super(\n      {\n        ...data,\n        expiredAt,\n      },\n      client\n    );\n  }\n\n  /**\n   * 对话失效时间\n   * @type {Date}\n   */\n  set expiredAt(value) {\n    this._expiredAt = decodeDate(value);\n  }\n  get expiredAt() {\n    return this._expiredAt;\n  }\n\n  /**\n   * 对话是否已失效\n   * @type {Boolean}\n   */\n  get expired() {\n    return this.expiredAt < new Date();\n  }\n\n  async _send(...args) {\n    if (this.expired)\n      throw createError({ code: ErrorCode.CONVERSATION_EXPIRED });\n    try {\n      return await super._send(...args);\n    } catch (error) {\n      throw transformNotFoundError(error);\n    }\n  }\n\n  async send(...args) {\n    try {\n      return await super.send(...args);\n    } catch (error) {\n      throw transformNotFoundError(error);\n    }\n  }\n\n  toFullJSON() {\n    const { expiredAt } = this;\n    return {\n      ...super.toFullJSON(),\n      expiredAt: getTime(expiredAt),\n    };\n  }\n\n  toJSON() {\n    const { expiredAt, expired } = this;\n    return {\n      ...super.toJSON(),\n      expiredAt,\n      expired,\n    };\n  }\n}\n\nexport default TemporaryConversation;\n","import d from 'debug';\n\nconst debug = d('LC:ConversationQuery');\n\nexport default class ConversationQuery {\n  static _encode(value) {\n    if (value instanceof Date) {\n      return { __type: 'Date', iso: value.toJSON() };\n    }\n    if (value instanceof RegExp) {\n      return value.source;\n    }\n    return value;\n  }\n\n  static _quote(s) {\n    return `\\\\Q${s.replace('\\\\E', '\\\\E\\\\\\\\E\\\\Q')}\\\\E`;\n  }\n\n  static _calculateFlag(options) {\n    return ['withLastMessagesRefreshed', 'compact'].reduce(\n      // eslint-disable-next-line no-bitwise\n      (prev, key) => (prev << 1) + Boolean(options[key]),\n      0\n    );\n  }\n\n  /**\n   * Create a ConversationQuery\n   * @param  {IMClient} client\n   */\n  constructor(client) {\n    this._client = client;\n    this._where = {};\n    this._extraOptions = {};\n  }\n\n  _addCondition(key, condition, value) {\n    // Check if we already have a condition\n    if (!this._where[key]) {\n      this._where[key] = {};\n    }\n    this._where[key][condition] = this.constructor._encode(value);\n    return this;\n  }\n\n  toJSON() {\n    const json = {\n      where: this._where,\n      flag: this.constructor._calculateFlag(this._extraOptions),\n    };\n    if (typeof this._skip !== 'undefined') json.skip = this._skip;\n    if (typeof this._limit !== 'undefined') json.limit = this._limit;\n    if (typeof this._order !== 'undefined') json.sort = this._order;\n    debug(json);\n    return json;\n  }\n\n  /**\n   * 增加查询条件，指定聊天室的组员包含某些成员即可返回\n   * @param {string[]} peerIds - 成员 ID 列表\n   * @return {ConversationQuery} self\n   */\n  containsMembers(peerIds) {\n    return this.containsAll('m', peerIds);\n  }\n\n  /**\n   * 增加查询条件，指定聊天室的组员条件满足条件的才返回\n   *\n   * @param {string[]} - 成员 ID 列表\n   * @param {Boolean} includeSelf - 是否包含自己\n   * @return {ConversationQuery} self\n   */\n  withMembers(peerIds, includeSelf) {\n    const peerIdsSet = new Set(peerIds);\n    if (includeSelf) {\n      peerIdsSet.add(this._client.id);\n    }\n    this.sizeEqualTo('m', peerIdsSet.size);\n    return this.containsMembers(Array.from(peerIdsSet));\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段满足等于条件时即可返回\n   *\n   * @param {string} key\n   * @param value\n   * @return {ConversationQuery} self\n   */\n  equalTo(key, value) {\n    this._where[key] = this.constructor._encode(value);\n    return this;\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段满足小于条件时即可返回\n   * @param {string} key\n   * @param value\n   * @return {ConversationQuery} self\n   */\n  lessThan(key, value) {\n    return this._addCondition(key, '$lt', value);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段满足小于等于条件时即可返回\n\n   * @param {string} key\n   * @param value\n   * @return {ConversationQuery} self\n   */\n  lessThanOrEqualTo(key, value) {\n    return this._addCondition(key, '$lte', value);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段满足大于条件时即可返回\n   *\n   * @param {string} key\n   * @param value\n   * @return {ConversationQuery} self\n   */\n\n  greaterThan(key, value) {\n    return this._addCondition(key, '$gt', value);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段满足大于等于条件时即可返回\n   *\n   * @param {string} key\n   * @param value\n   * @return {ConversationQuery} self\n   */\n\n  greaterThanOrEqualTo(key, value) {\n    return this._addCondition(key, '$gte', value);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段满足不等于条件时即可返回\n   *\n   * @param {string} key\n   * @param value\n   * @return {ConversationQuery} self\n   */\n  notEqualTo(key, value) {\n    return this._addCondition(key, '$ne', value);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 存在指定的字段时即可返回\n   *\n   * @since 3.5.0\n   * @param {string} key\n   * @return {ConversationQuery} self\n   */\n  exists(key) {\n    return this._addCondition(key, '$exists', true);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 不存在指定的字段时即可返回\n   *\n   * @since 3.5.0\n   * @param {string} key\n   * @return {ConversationQuery} self\n   */\n  doesNotExist(key) {\n    return this._addCondition(key, '$exists', false);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段对应的值包含在指定值中时即可返回\n   *\n   * @param {string} key\n   * @param values\n   * @return {ConversationQuery} self\n   */\n  containedIn(key, values) {\n    return this._addCondition(key, '$in', values);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段对应的值不包含在指定值中时即可返回\n   *\n   * @param {string} key\n   * @param values\n   * @return {ConversationQuery} self\n   */\n  notContainsIn(key, values) {\n    return this._addCondition(key, '$nin', values);\n  }\n  /**\n   * 增加查询条件，当conversation的属性中对应的字段中的元素包含所有的值才可返回\n   *\n   * @param {string} key\n   * @param values\n   * @return {ConversationQuery} self\n   */\n  containsAll(key, values) {\n    return this._addCondition(key, '$all', values);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段对应的值包含此字符串即可返回\n   *\n   * @param {string} key\n   * @param {string} subString\n   * @return {ConversationQuery} self\n   */\n  contains(key, subString) {\n    return this._addCondition(\n      key,\n      '$regex',\n      ConversationQuery._quote(subString)\n    );\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段对应的值以此字符串起始即可返回\n   *\n   * @param {string} key\n   * @param {string} prefix\n   * @return {ConversationQuery} self\n   */\n  startsWith(key, prefix) {\n    return this._addCondition(\n      key,\n      '$regex',\n      `^${ConversationQuery._quote(prefix)}`\n    );\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段对应的值以此字符串结束即可返回\n   *\n   * @param {string} key\n   * @param {string} suffix\n   * @return {ConversationQuery} self\n   */\n  endsWith(key, suffix) {\n    return this._addCondition(\n      key,\n      '$regex',\n      `${ConversationQuery._quote(suffix)}$`\n    );\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段对应的值满足提供的正则表达式即可返回\n   *\n   * @param {string} key\n   * @param {RegExp} regex\n   * @return {ConversationQuery} self\n   */\n  matches(key, regex) {\n    this._addCondition(key, '$regex', regex);\n    // Javascript regex options support mig as inline options but store them\n    // as properties of the object. We support mi & should migrate them to\n    // modifiers\n    let _modifiers = '';\n    if (regex.ignoreCase) {\n      _modifiers += 'i';\n    }\n    if (regex.multiline) {\n      _modifiers += 'm';\n    }\n\n    if (_modifiers && _modifiers.length) {\n      this._addCondition(key, '$options', _modifiers);\n    }\n    return this;\n  }\n\n  /**\n   * 添加查询约束条件，查找 key 类型是数组，该数组的长度匹配提供的数值\n   *\n   * @param {string} key\n   * @param {Number} length\n   * @return {ConversationQuery} self\n   */\n  sizeEqualTo(key, length) {\n    return this._addCondition(key, '$size', length);\n  }\n\n  /**\n   * 设置返回集合的大小上限\n   *\n   * @param {Number} limit - 上限\n   * @return {ConversationQuery} self\n   */\n  limit(limit) {\n    this._limit = limit;\n    return this;\n  }\n\n  /**\n   * 设置返回集合的起始位置，一般用于分页\n   *\n   * @param {Number} skip - 起始位置跳过几个对象\n   * @return {ConversationQuery} self\n   */\n  skip(skip) {\n    this._skip = skip;\n    return this;\n  }\n\n  /**\n   * 设置返回集合按照指定key进行增序排列\n   *\n   * @param {string} key\n   * @return {ConversationQuery} self\n   */\n  ascending(key) {\n    this._order = key;\n    return this;\n  }\n\n  /**\n   * 设置返回集合按照指定key进行增序排列，如果已设置其他排序，原排序的优先级较高\n   *\n   * @param {string} key\n   * @return {ConversationQuery} self\n   */\n  addAscending(key) {\n    if (this._order) {\n      this._order += `,${key}`;\n    } else {\n      this._order = key;\n    }\n    return this;\n  }\n\n  /**\n   * 设置返回集合按照指定 key 进行降序排列\n   *\n   * @param {string} key\n   * @return {ConversationQuery} self\n   */\n  descending(key) {\n    this._order = `-${key}`;\n    return this;\n  }\n\n  /**\n   * 设置返回集合按照指定 key 进行降序排列，如果已设置其他排序，原排序的优先级较高\n   *\n   * @param {string} key\n   * @return {ConversationQuery} self\n   */\n  addDescending(key) {\n    if (this._order) {\n      this._order += `,-${key}`;\n    } else {\n      this._order = `-${key}`;\n    }\n    return this;\n  }\n\n  /**\n   * 设置返回的 conversations 刷新最后一条消息\n   * @param  {Boolean} [enabled=true]\n   * @return {ConversationQuery} self\n   */\n  withLastMessagesRefreshed(enabled = true) {\n    this._extraOptions.withLastMessagesRefreshed = enabled;\n    return this;\n  }\n\n  /**\n   * 设置返回的 conversations 为精简模式，即不含成员列表\n   * @param  {Boolean} [enabled=true]\n   * @return {ConversationQuery} self\n   */\n  compact(enabled = true) {\n    this._extraOptions.compact = enabled;\n    return this;\n  }\n\n  /**\n   * 执行查询\n   * @return {Promise.<ConversationBase[]>}\n   */\n  async find() {\n    return this._client._executeQuery(this);\n  }\n}\n","import d from 'debug';\nimport { Expirable } from './utils';\n\nconst debug = d('LC:SessionManager');\n\nexport default class SessionManager {\n  constructor({ refresh, onBeforeGetSessionToken } = {}) {\n    this.refresh = refresh;\n    this._onBeforeGetSessionToken = onBeforeGetSessionToken;\n    this.setSessionToken(null, 0);\n  }\n\n  setSessionToken(token, ttl) {\n    debug('set session token', token, ttl);\n    const sessionToken = new Expirable(token, ttl * 1000);\n    this._sessionToken = sessionToken;\n    delete this._pendingSessionTokenPromise;\n    return sessionToken;\n  }\n\n  async setSessionTokenAsync(promise) {\n    const currentSessionToken = this._sessionToken;\n    this._pendingSessionTokenPromise = promise.catch(error => {\n      // revert, otherwise the following getSessionToken calls\n      // will all be rejected\n      this._sessionToken = currentSessionToken;\n      throw error;\n    });\n    return this.setSessionToken(...(await this._pendingSessionTokenPromise));\n  }\n\n  async getSessionToken({ autoRefresh = true } = {}) {\n    debug('get session token');\n    if (this._onBeforeGetSessionToken) {\n      this._onBeforeGetSessionToken(this);\n    }\n    const { value, originalValue } =\n      this._sessionToken || (await this._pendingSessionTokenPromise);\n    if (value === Expirable.EXPIRED && autoRefresh && this.refresh) {\n      debug('refresh expired session token');\n      const { value: newValue } = await this.setSessionTokenAsync(\n        this.refresh(this, originalValue)\n      );\n      debug('session token', newValue);\n      return newValue;\n    }\n    debug('session token', value);\n    return value;\n  }\n\n  revoke() {\n    if (this._sessionToken) this._sessionToken.expiredAt = -1;\n  }\n}\n","import EventEmitter from 'eventemitter3';\nimport { decode as decodeBase64 } from 'base64-arraybuffer';\nimport remove from 'lodash/remove';\nimport d from 'debug';\nimport {\n  Conversation,\n  ChatRoom,\n  ServiceConversation,\n  TemporaryConversation,\n} from './conversations';\nimport ConversationBase from './conversations/conversation-base';\nimport ConversationQuery from './conversation-query';\nimport {\n  GenericCommand,\n  SessionCommand,\n  ConvCommand,\n  AckCommand,\n  JsonObjectMessage,\n  ReadCommand,\n  ReadTuple,\n  CommandType,\n  OpType,\n} from '../proto/message';\nimport * as Event from './events/im';\nimport { ErrorCode, createError } from './error';\nimport {\n  Expirable,\n  Cache,\n  keyRemap,\n  union,\n  difference,\n  trim,\n  internal,\n  throttle,\n  encode,\n  decode,\n  decodeDate,\n  getTime,\n} from './utils';\nimport { applyDecorators, applyDispatcher } from './plugin';\nimport SessionManager from './session-manager';\nimport runSignatureFactory from './signature-factory-runner';\nimport { MessageStatus } from './messages/message';\nimport { version as VERSION } from '../package.json';\n\nconst debug = d('LC:IMClient');\n\nconst {\n  INVITED,\n  KICKED,\n  MEMBERS_JOINED,\n  MEMBERS_LEFT,\n  MEMBER_INFO_UPDATED,\n  BLOCKED,\n  UNBLOCKED,\n  MEMBERS_BLOCKED,\n  MEMBERS_UNBLOCKED,\n  MUTED,\n  UNMUTED,\n  MEMBERS_MUTED,\n  MEMBERS_UNMUTED,\n  MESSAGE,\n  UNREAD_MESSAGES_COUNT_UPDATE,\n  CLOSE,\n  CONFLICT,\n  UNHANDLED_MESSAGE,\n  CONVERSATION_INFO_UPDATED,\n  MESSAGE_RECALL,\n  MESSAGE_UPDATE,\n  INFO_UPDATED,\n} = Event;\n\nconst isTemporaryConversatrionId = id => /^_tmp:/.test(id);\n\n/**\n * 1 patch-msg\n * 1 temp-conv-msg\n * 0 auto-bind-deviceid-and-installation\n * 1 transient-msg-ack\n * 1 keep-notification\n * 1 partial-failed-msg\n * @ignore\n */\nconst configBitmap = 0b111011;\n\nexport default class IMClient extends EventEmitter {\n  /**\n   * 无法直接实例化，请使用 {@link Realtime#createIMClient} 创建新的 IMClient。\n   *\n   * @extends EventEmitter\n   */\n  constructor(id, options = {}, props) {\n    if (!(id === undefined || typeof id === 'string')) {\n      throw new TypeError(`Client id [${id}] is not a String`);\n    }\n    super();\n    Object.assign(\n      this,\n      {\n        /**\n         * @var id {String} 客户端 id\n         * @memberof IMClient#\n         */\n        id,\n        options,\n      },\n      props\n    );\n\n    if (!this._messageParser) {\n      throw new Error('IMClient must be initialized with a MessageParser');\n    }\n    this._conversationCache = new Cache(`client:${this.id}`);\n    this._ackMessageBuffer = {};\n    internal(this).lastPatchTime = Date.now();\n    internal(this).lastNotificationTime = undefined;\n    internal(this)._eventemitter = new EventEmitter();\n    if (debug.enabled) {\n      Object.values(Event).forEach(event =>\n        this.on(event, (...payload) =>\n          this._debug(`${event} event emitted. %O`, payload)\n        )\n      );\n    }\n    // onIMClientCreate hook\n    applyDecorators(this._plugins.onIMClientCreate, this);\n  }\n\n  _debug(...params) {\n    debug(...params, `[${this.id}]`);\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  async _dispatchCommand(command) {\n    this._debug(trim(command), 'received');\n    if (command.serverTs) {\n      internal(this).lastNotificationTime = getTime(\n        decodeDate(command.serverTs)\n      );\n    }\n    switch (command.cmd) {\n      case CommandType.conv:\n        return this._dispatchConvMessage(command);\n      case CommandType.direct:\n        return this._dispatchDirectMessage(command);\n      case CommandType.session:\n        return this._dispatchSessionMessage(command);\n      case CommandType.unread:\n        return this._dispatchUnreadMessage(command);\n      case CommandType.rcp:\n        return this._dispatchRcpMessage(command);\n      case CommandType.patch:\n        return this._dispatchPatchMessage(command);\n      default:\n        return this.emit(UNHANDLED_MESSAGE, command);\n    }\n  }\n\n  async _dispatchSessionMessage(message) {\n    const { sessionMessage: { code, reason } } = message;\n    switch (message.op) {\n      case OpType.closed: {\n        internal(this)._eventemitter.emit('close');\n        if (code === ErrorCode.SESSION_CONFLICT) {\n          /**\n           * 用户在其他客户端登录，当前客户端被服务端强行下线。详见文档「单点登录」章节。\n           * @event IMClient#CONFLICT\n           */\n          return this.emit(CONFLICT, {\n            reason,\n          });\n        }\n        /**\n         * 当前客户端被服务端强行下线\n         * @event IMClient#CLOSE\n         * @param {Object} payload\n         * @param {Number} payload.code 错误码\n         * @param {String} payload.reason 原因\n         */\n        return this.emit(CLOSE, {\n          code,\n          reason,\n        });\n      }\n      default:\n        this.emit(UNHANDLED_MESSAGE, message);\n        throw new Error('Unrecognized session command');\n    }\n  }\n\n  _dispatchUnreadMessage({ unreadMessage: { convs, notifTime } }) {\n    internal(this).lastUnreadNotifTime = notifTime;\n    // ensure all converstions are cached\n    return this.getConversations(convs.map(conv => conv.cid))\n      .then(() =>\n        // update conversations data\n        Promise.all(\n          convs.map(\n            ({\n              cid,\n              unread,\n              mid,\n              timestamp: ts,\n              from,\n              data,\n              binaryMsg,\n              patchTimestamp,\n              mentioned,\n            }) => {\n              const conversation = this._conversationCache.get(cid);\n              // deleted conversation\n              if (!conversation) return null;\n              let timestamp;\n              if (ts) {\n                timestamp = decodeDate(ts);\n                conversation.lastMessageAt = timestamp; // eslint-disable-line no-param-reassign\n              }\n              return (mid\n                ? this._messageParser.parse(binaryMsg || data).then(message => {\n                    const messageProps = {\n                      id: mid,\n                      cid,\n                      timestamp,\n                      updatedAt: patchTimestamp,\n                      from,\n                    };\n                    Object.assign(message, messageProps);\n                    conversation.lastMessage = message; // eslint-disable-line no-param-reassign\n                  })\n                : Promise.resolve()\n              ).then(() => {\n                conversation._setUnreadMessagesMentioned(mentioned);\n                const countNotUpdated =\n                  unread === internal(conversation).unreadMessagesCount;\n                if (countNotUpdated) return null; // to be filtered\n                // manipulate internal property directly to skip unreadmessagescountupdate event\n                internal(conversation).unreadMessagesCount = unread;\n                return conversation;\n              });\n              // filter conversations without unread count update\n            }\n          )\n        ).then(conversations =>\n          conversations.filter(conversation => conversation)\n        )\n      )\n      .then(conversations => {\n        if (conversations.length) {\n          /**\n           * 未读消息数目更新\n           * @event IMClient#UNREAD_MESSAGES_COUNT_UPDATE\n           * @since 3.4.0\n           * @param {Conversation[]} conversations 未读消息数目有更新的对话列表\n           */\n          this.emit(UNREAD_MESSAGES_COUNT_UPDATE, conversations);\n        }\n      });\n  }\n\n  async _dispatchRcpMessage(message) {\n    const { rcpMessage, rcpMessage: { read } } = message;\n    const conversationId = rcpMessage.cid;\n    const messageId = rcpMessage.id;\n    const timestamp = decodeDate(rcpMessage.t);\n    const conversation = this._conversationCache.get(conversationId);\n    // conversation not cached means the client does not send the message\n    // during this session\n    if (!conversation) return;\n    conversation._handleReceipt({ messageId, timestamp, read });\n  }\n\n  _dispatchPatchMessage({ patchMessage: { patches } }) {\n    // ensure all converstions are cached\n    return this.getConversations(patches.map(patch => patch.cid)).then(() =>\n      Promise.all(\n        patches.map(\n          ({\n            cid,\n            mid,\n            timestamp,\n            recall,\n            data,\n            patchTimestamp,\n            from,\n            binaryMsg,\n            mentionAll,\n            mentionPids,\n          }) => {\n            const conversation = this._conversationCache.get(cid);\n            // deleted conversation\n            if (!conversation) return null;\n            return this._messageParser\n              .parse(binaryMsg || data)\n              .then(message => {\n                const patchTime = getTime(decodeDate(patchTimestamp));\n                const messageProps = {\n                  id: mid,\n                  cid,\n                  timestamp,\n                  updatedAt: patchTime,\n                  from,\n                  mentionList: mentionPids,\n                  mentionedAll: mentionAll,\n                };\n                Object.assign(message, messageProps);\n                message._setStatus(MessageStatus.SENT);\n                message._updateMentioned(this.id);\n                if (internal(this).lastPatchTime < patchTime) {\n                  internal(this).lastPatchTime = patchTime;\n                }\n                // update conversation lastMessage\n                if (\n                  conversation.lastMessage &&\n                  conversation.lastMessage.id === mid\n                ) {\n                  conversation.lastMessage = message; // eslint-disable-line no-param-reassign\n                }\n                if (recall) {\n                  /**\n                   * 消息被撤回\n                   * @event IMClient#MESSAGE_RECALL\n                   * @param {AVMessage} message 被撤回的消息\n                   * @param {ConversationBase} conversation 消息所在的会话\n                   */\n                  this.emit(MESSAGE_RECALL, message, conversation);\n                  /**\n                   * 消息被撤回\n                   * @event ConversationBase#MESSAGE_RECALL\n                   * @param {AVMessage} message 被撤回的消息\n                   */\n                  conversation.emit(MESSAGE_RECALL, message);\n                } else {\n                  /**\n                   * 消息被修改\n                   * @event IMClient#MESSAGE_UPDATE\n                   * @param {AVMessage} message 被修改的消息\n                   * @param {ConversationBase} conversation 消息所在的会话\n                   */\n                  this.emit(MESSAGE_UPDATE, message, conversation);\n                  /**\n                   * 消息被修改\n                   * @event ConversationBase#MESSAGE_UPDATE\n                   * @param {AVMessage} message 被修改的消息\n                   */\n                  conversation.emit(MESSAGE_UPDATE, message);\n                }\n              });\n          }\n        )\n      )\n    );\n  }\n\n  async _dispatchConvMessage(message) {\n    const { convMessage, convMessage: { initBy, m, info, attr } } = message;\n    const conversation = await this.getConversation(convMessage.cid);\n    switch (message.op) {\n      case OpType.joined: {\n        if (!conversation.transient) {\n          // eslint-disable-next-line no-param-reassign\n          conversation.members = union(conversation.members, [this.id]);\n        }\n        const payload = {\n          invitedBy: initBy,\n        };\n        /**\n         * 当前用户被添加至某个对话\n         * @event IMClient#INVITED\n         * @param {Object} payload\n         * @param {String} payload.invitedBy 邀请者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(INVITED, payload, conversation);\n        /**\n         * 当前用户被添加至当前对话\n         * @event ConversationBase#INVITED\n         * @param {Object} payload\n         * @param {String} payload.invitedBy 该移除操作的发起者 id\n         */\n        conversation.emit(INVITED, payload);\n        return;\n      }\n      case OpType.left: {\n        if (!conversation.transient) {\n          // eslint-disable-next-line no-param-reassign\n          conversation.members = difference(conversation.members, [this.id]);\n        }\n        const payload = {\n          kickedBy: initBy,\n        };\n        /**\n         * 当前用户被从某个对话中移除\n         * @event IMClient#KICKED\n         * @param {Object} payload\n         * @param {String} payload.kickedBy 该移除操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(KICKED, payload, conversation);\n        /**\n         * 当前用户被从当前对话中移除\n         * @event ConversationBase#KICKED\n         * @param {Object} payload\n         * @param {String} payload.kickedBy 该移除操作的发起者 id\n         */\n        conversation.emit(KICKED, payload);\n        return;\n      }\n      case OpType.members_joined: {\n        if (!conversation.transient) {\n          // eslint-disable-next-line no-param-reassign\n          conversation.members = union(conversation.members, convMessage.m);\n        }\n        const payload = {\n          invitedBy: initBy,\n          members: m,\n        };\n        /**\n         * 有用户被添加至某个对话\n         * @event IMClient#MEMBERS_JOINED\n         * @param {Object} payload\n         * @param {String[]} payload.members 被添加的用户 id 列表\n         * @param {String} payload.invitedBy 邀请者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(MEMBERS_JOINED, payload, conversation);\n        /**\n         * 有成员被添加至当前对话\n         * @event ConversationBase#MEMBERS_JOINED\n         * @param {Object} payload\n         * @param {String[]} payload.members 被添加的成员 id 列表\n         * @param {String} payload.invitedBy 邀请者 id\n         */\n        conversation.emit(MEMBERS_JOINED, payload);\n        return;\n      }\n      case OpType.members_left: {\n        if (!conversation.transient) {\n          // eslint-disable-next-line no-param-reassign\n          conversation.members = difference(\n            conversation.members,\n            convMessage.m\n          );\n        }\n        const payload = {\n          kickedBy: initBy,\n          members: m,\n        };\n        /**\n         * 有成员被从某个对话中移除\n         * @event IMClient#MEMBERS_LEFT\n         * @param {Object} payload\n         * @param {String[]} payload.members 被移除的成员 id 列表\n         * @param {String} payload.kickedBy 该移除操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(MEMBERS_LEFT, payload, conversation);\n        /**\n         * 有成员被从当前对话中移除\n         * @event ConversationBase#MEMBERS_LEFT\n         * @param {Object} payload\n         * @param {String[]} payload.members 被移除的成员 id 列表\n         * @param {String} payload.kickedBy 该移除操作的发起者 id\n         */\n        conversation.emit(MEMBERS_LEFT, payload);\n        return;\n      }\n      case OpType.members_blocked: {\n        const payload = {\n          blockedBy: initBy,\n          members: m,\n        };\n        /**\n         * 有成员被加入某个对话的黑名单\n         * @event IMClient#MEMBERS_BLOCKED\n         * @param {Object} payload\n         * @param {String[]} payload.members 成员 id 列表\n         * @param {String} payload.blockedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(MEMBERS_BLOCKED, payload, conversation);\n        /**\n         * 有成员被加入当前对话的黑名单\n         * @event ConversationBase#MEMBERS_BLOCKED\n         * @param {Object} payload\n         * @param {String[]} payload.members 成员 id 列表\n         * @param {String} payload.blockedBy 该操作的发起者 id\n         */\n        conversation.emit(MEMBERS_BLOCKED, payload);\n        return;\n      }\n      case OpType.members_unblocked: {\n        const payload = {\n          unblockedBy: initBy,\n          members: m,\n        };\n        /**\n         * 有成员被移出某个对话的黑名单\n         * @event IMClient#MEMBERS_UNBLOCKED\n         * @param {Object} payload\n         * @param {String[]} payload.members 成员 id 列表\n         * @param {String} payload.unblockedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(MEMBERS_UNBLOCKED, payload, conversation);\n        /**\n         * 有成员被移出当前对话的黑名单\n         * @event ConversationBase#MEMBERS_UNBLOCKED\n         * @param {Object} payload\n         * @param {String[]} payload.members 成员 id 列表\n         * @param {String} payload.unblockedBy 该操作的发起者 id\n         */\n        conversation.emit(MEMBERS_UNBLOCKED, payload);\n        return;\n      }\n      case OpType.blocked: {\n        const payload = {\n          blockedBy: initBy,\n        };\n        /**\n         * 当前用户被加入某个对话的黑名单\n         * @event IMClient#BLOCKED\n         * @param {Object} payload\n         * @param {String} payloadblockedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(BLOCKED, payload, conversation);\n        /**\n         * 当前用户被加入当前对话的黑名单\n         * @event ConversationBase#BLOCKED\n         * @param {Object} payload\n         * @param {String} payload.blockedBy 该操作的发起者 id\n         */\n        conversation.emit(BLOCKED, payload);\n        return;\n      }\n      case OpType.unblocked: {\n        const payload = {\n          unblockedBy: initBy,\n        };\n        /**\n         * 当前用户被移出某个对话的黑名单\n         * @event IMClient#UNBLOCKED\n         * @param {Object} payload\n         * @param {String} payload.unblockedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(UNBLOCKED, payload, conversation);\n        /**\n         * 当前用户被移出当前对话的黑名单\n         * @event ConversationBase#UNBLOCKED\n         * @param {Object} payload\n         * @param {String} payload.unblockedBy 该操作的发起者 id\n         */\n        conversation.emit(UNBLOCKED, payload);\n        return;\n      }\n      case OpType.members_shutuped: {\n        const payload = {\n          mutedBy: initBy,\n          members: m,\n        };\n        /**\n         * 有成员在某个对话中被禁言\n         * @event IMClient#MEMBERS_MUTED\n         * @param {Object} payload\n         * @param {String[]} payload.members 成员 id 列表\n         * @param {String} payload.mutedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(MEMBERS_MUTED, payload, conversation);\n        /**\n         * 有成员在当前对话中被禁言\n         * @event ConversationBase#MEMBERS_MUTED\n         * @param {Object} payload\n         * @param {String[]} payload.members 成员 id 列表\n         * @param {String} payload.mutedBy 该操作的发起者 id\n         */\n        conversation.emit(MEMBERS_MUTED, payload);\n        return;\n      }\n      case OpType.members_unshutuped: {\n        const payload = {\n          unmutedBy: initBy,\n          members: m,\n        };\n        /**\n         * 有成员在某个对话中被解除禁言\n         * @event IMClient#MEMBERS_UNMUTED\n         * @param {Object} payload\n         * @param {String[]} payload.members 成员 id 列表\n         * @param {String} payload.unmutedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(MEMBERS_UNMUTED, payload, conversation);\n        /**\n         * 有成员在当前对话中被解除禁言\n         * @event ConversationBase#MEMBERS_UNMUTED\n         * @param {Object} payload\n         * @param {String[]} payload.members 成员 id 列表\n         * @param {String} payload.unmutedBy 该操作的发起者 id\n         */\n        conversation.emit(MEMBERS_UNMUTED, payload);\n        return;\n      }\n      case OpType.shutuped: {\n        const payload = {\n          mutedBy: initBy,\n        };\n        /**\n         * 有成员在某个对话中被禁言\n         * @event IMClient#MUTED\n         * @param {Object} payload\n         * @param {String} payload.mutedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(MUTED, payload, conversation);\n        /**\n         * 有成员在当前对话中被禁言\n         * @event ConversationBase#MUTED\n         * @param {Object} payload\n         * @param {String} payload.mutedBy 该操作的发起者 id\n         */\n        conversation.emit(MUTED, payload);\n        return;\n      }\n      case OpType.unshutuped: {\n        const payload = {\n          unmutedBy: initBy,\n        };\n        /**\n         * 有成员在某个对话中被解除禁言\n         * @event IMClient#UNMUTED\n         * @param {Object} payload\n         * @param {String} payload.unmutedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(UNMUTED, payload, conversation);\n        /**\n         * 有成员在当前对话中被解除禁言\n         * @event ConversationBase#UNMUTED\n         * @param {Object} payload\n         * @param {String} payload.unmutedBy 该操作的发起者 id\n         */\n        conversation.emit(UNMUTED, payload);\n        return;\n      }\n      case OpType.member_info_changed: {\n        const { pid, role } = info;\n        const { memberInfoMap } = internal(conversation);\n        // 如果不存在缓存，且不是 role 的更新，则不通知\n        if (!memberInfoMap && !role) return;\n        const memberInfo = await conversation.getMemberInfo(pid);\n        internal(memberInfo).role = role;\n        const payload = {\n          member: pid,\n          memberInfo,\n          updatedBy: initBy,\n        };\n        /**\n         * 有成员的对话信息被更新\n         * @event IMClient#MEMBER_INFO_UPDATED\n         * @param {Object} payload\n         * @param {String[]} payload.member 被更新对话信息的成员 id\n         * @param {ConversationMumberInfo} payload.memberInfo 被更新的成员对话信息\n         * @param {String} payload.updatedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(MEMBER_INFO_UPDATED, payload, conversation);\n        /**\n         * 有成员的对话信息被更新\n         * @event ConversationBase#MEMBER_INFO_UPDATED\n         * @param {Object} payload\n         * @param {String[]} payload.member 被更新对话信息的成员 id\n         * @param {ConversationMumberInfo} payload.memberInfo 被更新的成员对话信息\n         * @param {String} payload.updatedBy 该操作的发起者 id\n         */\n        conversation.emit(MEMBER_INFO_UPDATED, payload);\n        return;\n      }\n      case OpType.updated: {\n        const attributes = decode(JSON.parse(attr.data));\n        conversation._updateServerAttributes(attributes);\n        const payload = {\n          attributes,\n          updatedBy: initBy,\n        };\n        /**\n         * 该对话信息被更新\n         * @event IMClient#CONVERSATION_INFO_UPDATED\n         * @param {Object} payload\n         * @param {Object} payload.attributes 被更新的属性\n         * @param {String} payload.updatedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(CONVERSATION_INFO_UPDATED, payload, conversation);\n        /**\n         * 有对话信息被更新\n         * @event ConversationBase#INFO_UPDATED\n         * @param {Object} payload\n         * @param {Object} payload.attributes 被更新的属性\n         * @param {String} payload.updatedBy 该操作的发起者 id\n         */\n        conversation.emit(INFO_UPDATED, payload);\n        return;\n      }\n      default:\n        this.emit(UNHANDLED_MESSAGE, message);\n        throw new Error('Unrecognized conversation command');\n    }\n  }\n\n  _dispatchDirectMessage(originalMessage) {\n    const {\n      directMessage,\n      directMessage: {\n        id,\n        cid,\n        fromPeerId,\n        timestamp,\n        transient,\n        patchTimestamp,\n        mentionPids,\n        mentionAll,\n        binaryMsg,\n        msg,\n      },\n    } = originalMessage;\n    const content = binaryMsg ? binaryMsg.toArrayBuffer() : msg;\n    return Promise.all([\n      this.getConversation(directMessage.cid),\n      this._messageParser.parse(content),\n    ]).then(([conversation, message]) => {\n      // deleted conversation\n      if (!conversation) return undefined;\n      const messageProps = {\n        id,\n        cid,\n        timestamp,\n        updatedAt: patchTimestamp,\n        from: fromPeerId,\n        mentionList: mentionPids,\n        mentionedAll: mentionAll,\n      };\n      Object.assign(message, messageProps);\n      message._updateMentioned(this.id);\n      message._setStatus(MessageStatus.SENT);\n      // filter outgoing message sent from another device\n      if (message.from !== this.id) {\n        if (!(transient || conversation.transient)) {\n          this._sendAck(message);\n        }\n      }\n      return this._dispatchParsedMessage(message, conversation);\n    });\n  }\n\n  _dispatchParsedMessage(message, conversation) {\n    // beforeMessageDispatch hook\n    return applyDispatcher(this._plugins.beforeMessageDispatch, [\n      message,\n      conversation,\n    ]).then(shouldDispatch => {\n      if (shouldDispatch === false) return;\n      conversation.lastMessage = message; // eslint-disable-line no-param-reassign\n      conversation.lastMessageAt = message.timestamp; // eslint-disable-line no-param-reassign\n      // filter outgoing message sent from another device\n      if (message.from !== this.id) {\n        conversation.unreadMessagesCount += 1; // eslint-disable-line no-param-reassign\n        if (message.mentioned) conversation._setUnreadMessagesMentioned(true);\n      }\n      /**\n       * 当前用户收到消息\n       * @event IMClient#MESSAGE\n       * @param {Message} message\n       * @param {ConversationBase} conversation 收到消息的对话\n       */\n      this.emit(MESSAGE, message, conversation);\n      /**\n       * 当前对话收到消息\n       * @event ConversationBase#MESSAGE\n       * @param {Message} message\n       */\n      conversation.emit(MESSAGE, message);\n    });\n  }\n\n  _sendAck(message) {\n    this._debug('send ack for %O', message);\n    const { cid } = message;\n    if (!cid) {\n      throw new Error('missing cid');\n    }\n    if (!this._ackMessageBuffer[cid]) {\n      this._ackMessageBuffer[cid] = [];\n    }\n    this._ackMessageBuffer[cid].push(message);\n    return this._doSendAck();\n  }\n\n  // jsdoc-ignore-start\n  @throttle(1000)\n  // jsdoc-ignore-end\n  _doSendAck() {\n    // if not connected, just skip everything\n    if (!this._connection.is('connected')) return;\n    this._debug('do send ack %O', this._ackMessageBuffer);\n    Promise.all(\n      Object.keys(this._ackMessageBuffer).map(cid => {\n        const convAckMessages = this._ackMessageBuffer[cid];\n        const timestamps = convAckMessages.map(message => message.timestamp);\n        const command = new GenericCommand({\n          cmd: 'ack',\n          peerId: this.id,\n          ackMessage: new AckCommand({\n            cid,\n            fromts: Math.min.apply(null, timestamps),\n            tots: Math.max.apply(null, timestamps),\n          }),\n        });\n        delete this._ackMessageBuffer[cid];\n        return this._send(command, false).catch(error => {\n          this._debug('send ack failed: %O', error);\n          this._ackMessageBuffer[cid] = convAckMessages;\n        });\n      })\n    );\n  }\n\n  _omitPeerId(value) {\n    internal(this).peerIdOmittable = value;\n  }\n\n  _send(cmd, ...args) {\n    const command = cmd;\n    if (!internal(this).peerIdOmittable && this.id) {\n      command.peerId = this.id;\n    }\n    return this._connection.send(command, ...args);\n  }\n\n  async _open(appId, tag, deviceId, isReconnect = false) {\n    this._debug('open session');\n    const { lastUnreadNotifTime, lastPatchTime } = internal(this);\n    const command = new GenericCommand({\n      cmd: 'session',\n      op: 'open',\n      appId,\n      peerId: this.id,\n      sessionMessage: new SessionCommand({\n        ua: `js/${VERSION}`,\n        r: isReconnect,\n        lastUnreadNotifTime,\n        lastPatchTime,\n        configBitmap,\n      }),\n    });\n    if (!isReconnect) {\n      Object.assign(\n        command.sessionMessage,\n        trim({\n          tag,\n          deviceId,\n        })\n      );\n      if (this.options.signatureFactory) {\n        const signatureResult = await runSignatureFactory(\n          this.options.signatureFactory,\n          [this._identity]\n        );\n        Object.assign(\n          command.sessionMessage,\n          keyRemap(\n            {\n              signature: 's',\n              timestamp: 't',\n              nonce: 'n',\n            },\n            signatureResult\n          )\n        );\n      }\n    } else {\n      const sessionToken = await this._sessionManager.getSessionToken({\n        autoRefresh: false,\n      });\n      if (sessionToken && sessionToken !== Expirable.EXPIRED) {\n        Object.assign(command.sessionMessage, {\n          st: sessionToken,\n        });\n      }\n    }\n    let resCommand;\n    try {\n      resCommand = await this._send(command);\n    } catch (error) {\n      if (error.code === ErrorCode.SESSION_TOKEN_EXPIRED) {\n        if (!this._sessionManager) {\n          // let it fail if sessoinToken not cached but command rejected as token expired\n          // to prevent session openning flood\n          throw new Error('Unexpected session expiration');\n        }\n        debug('Session token expired, reopening');\n        this._sessionManager.revoke();\n        return this._open(appId, tag, deviceId, isReconnect);\n      }\n      throw error;\n    }\n    const {\n      peerId,\n      sessionMessage,\n      sessionMessage: { st: token, stTtl: tokenTTL, code },\n    } = resCommand;\n    if (code) {\n      throw createError(sessionMessage);\n    }\n    if (peerId) {\n      this.id = peerId;\n      if (!this._identity) this._identity = peerId;\n      if (token) {\n        this._sessionManager =\n          this._sessionManager || this._createSessionManager();\n        this._sessionManager.setSessionToken(token, tokenTTL);\n      }\n      if (internal(this).lastNotificationTime) {\n        // Do not await for it as this is failable\n        this._syncNotifications(internal(this).lastNotificationTime).catch(\n          error => console.warn('Syncing notifications failed:', error)\n        );\n      } else {\n        // Set timestamp to now for next reconnection\n        internal(this).lastNotificationTime = Date.now();\n      }\n    } else {\n      console.warn('Unexpected session opened without peerId.');\n    }\n    return undefined;\n  }\n\n  async _syncNotifications(timestamp) {\n    const { hasMore, notifications } = await this._fetchNotifications(\n      timestamp\n    );\n    notifications.forEach(notification => {\n      const { cmd, op, serverTs, ...payload } = notification;\n      this._dispatchCommand({\n        cmd: CommandType[cmd],\n        op: OpType[op],\n        serverTs,\n        [`${cmd}Message`]: payload,\n      });\n    });\n    if (hasMore) {\n      return this._syncNotifications(internal(this).lastNotificationTime);\n    }\n    return undefined;\n  }\n\n  async _fetchNotifications(timestamp) {\n    return this._requestWithSessionToken({\n      method: 'GET',\n      path: '/rtm/notifications',\n      query: {\n        start_ts: timestamp,\n        notification_type: 'permanent',\n      },\n    });\n  }\n\n  _createSessionManager() {\n    debug('create SessionManager');\n    return new SessionManager({\n      onBeforeGetSessionToken: this._connection.checkConnectionAvailability.bind(\n        this._connection\n      ),\n      refresh: (manager, expiredSessionToken) =>\n        manager.setSessionTokenAsync(\n          Promise.resolve(\n            new GenericCommand({\n              cmd: 'session',\n              op: 'refresh',\n              sessionMessage: new SessionCommand({\n                ua: `js/${VERSION}`,\n                st: expiredSessionToken,\n              }),\n            })\n          )\n            .then(async command => {\n              if (this.options.signatureFactory) {\n                const signatureResult = await runSignatureFactory(\n                  this.options.signatureFactory,\n                  [this._identity]\n                );\n                Object.assign(\n                  command.sessionMessage,\n                  keyRemap(\n                    {\n                      signature: 's',\n                      timestamp: 't',\n                      nonce: 'n',\n                    },\n                    signatureResult\n                  )\n                );\n              }\n              return command;\n            })\n            .then(this._send.bind(this))\n            .then(({ sessionMessage: { st: token, stTtl: ttl } }) => [\n              token,\n              ttl,\n            ])\n        ),\n    });\n  }\n\n  async _requestWithSessionToken({ headers, query, ...params }) {\n    const sessionToken = await this._sessionManager.getSessionToken();\n    return this._request({\n      headers: {\n        'X-LC-IM-Session-Token': sessionToken,\n        ...headers,\n      },\n      query: {\n        client_id: this.id,\n        ...query,\n      },\n      ...params,\n    });\n  }\n\n  /**\n   * 关闭客户端\n   * @return {Promise}\n   */\n  async close() {\n    this._debug('close session');\n    const _ee = internal(this)._eventemitter;\n    _ee.emit('beforeclose');\n    if (this._connection.is('connected')) {\n      const command = new GenericCommand({\n        cmd: 'session',\n        op: 'close',\n      });\n      await this._send(command);\n    }\n    _ee.emit('close');\n    this.emit(CLOSE, {\n      code: 0,\n    });\n  }\n  /**\n   * 获取 client 列表中在线的 client，每次查询最多 20 个 clientId，超出部分会被忽略\n   * @param  {String[]} clientIds 要查询的 client ids\n   * @return {Primse.<String[]>} 在线的 client ids\n   */\n  async ping(clientIds) {\n    this._debug('ping');\n    if (!(clientIds instanceof Array)) {\n      throw new TypeError(`clientIds ${clientIds} is not an Array`);\n    }\n    if (!clientIds.length) {\n      return Promise.resolve([]);\n    }\n    const command = new GenericCommand({\n      cmd: 'session',\n      op: 'query',\n      sessionMessage: new SessionCommand({\n        sessionPeerIds: clientIds,\n      }),\n    });\n    const resCommand = await this._send(command);\n    return resCommand.sessionMessage.onlineSessionPeerIds;\n  }\n\n  /**\n   * 获取某个特定的对话\n   * @param  {String} id 对话 id，对应 _Conversation 表中的 objectId\n   * @param  {Boolean} [noCache=false] 强制不从缓存中获取\n   * @return {Promise.<ConversationBase>} 如果 id 对应的对话不存在则返回 null\n   */\n  async getConversation(id, noCache = false) {\n    if (typeof id !== 'string') {\n      throw new TypeError(`${id} is not a String`);\n    }\n    if (!noCache) {\n      const cachedConversation = this._conversationCache.get(id);\n      if (cachedConversation) {\n        return cachedConversation;\n      }\n    }\n    if (isTemporaryConversatrionId(id)) {\n      return (await this._getTemporaryConversations([id]))[0] || null;\n    }\n    return this.getQuery()\n      .equalTo('objectId', id)\n      .find()\n      .then(conversations => conversations[0] || null);\n  }\n\n  /**\n   * 通过 id 批量获取某个特定的对话\n   * @since 3.4.0\n   * @param  {String[]} ids 对话 id 列表，对应 _Conversation 表中的 objectId\n   * @param  {Boolean} [noCache=false] 强制不从缓存中获取\n   * @return {Promise.<ConversationBase[]>} 如果 id 对应的对话不存在则返回 null\n   */\n  async getConversations(ids, noCache = false) {\n    const remoteConversationIds = noCache\n      ? ids\n      : ids.filter(id => this._conversationCache.get(id) === null);\n    if (remoteConversationIds.length) {\n      const remoteTemporaryConversationIds = remove(\n        remoteConversationIds,\n        isTemporaryConversatrionId\n      );\n      const query = [];\n      if (remoteConversationIds.length) {\n        query.push(\n          this.getQuery()\n            .containedIn('objectId', remoteConversationIds)\n            .limit(999)\n            .find()\n        );\n      }\n      if (remoteTemporaryConversationIds.length) {\n        const remoteTemporaryConversationsPromise = remoteTemporaryConversationIds.map(\n          this._getTemporaryConversations.bind(this)\n        );\n        query.push(...remoteTemporaryConversationsPromise);\n      }\n      await Promise.all(query);\n    }\n    return ids.map(id => this._conversationCache.get(id));\n  }\n\n  async _getTemporaryConversations(ids) {\n    const command = new GenericCommand({\n      cmd: 'conv',\n      op: 'query',\n      convMessage: new ConvCommand({\n        tempConvIds: ids,\n      }),\n    });\n    const resCommand = await this._send(command);\n    return this._handleQueryResults(resCommand);\n  }\n\n  /**\n   * 构造一个 ConversationQuery 来查询对话\n   * @return {ConversationQuery.<PersistentConversation>}\n   */\n  getQuery() {\n    return new ConversationQuery(this);\n  }\n\n  /**\n   * 构造一个 ConversationQuery 来查询聊天室\n   * @return {ConversationQuery.<ChatRoom>}\n   */\n  getChatRoomQuery() {\n    return this.getQuery().equalTo('tr', true);\n  }\n\n  /**\n   * 构造一个 ConversationQuery 来查询服务号\n   * @return {ConversationQuery.<ServiceConversation>}\n   */\n  getServiceConversationQuery() {\n    return this.getQuery().equalTo('sys', true);\n  }\n\n  async _executeQuery(query) {\n    const queryJSON = query.toJSON();\n    queryJSON.where = new JsonObjectMessage({\n      data: JSON.stringify(encode(queryJSON.where)),\n    });\n    const command = new GenericCommand({\n      cmd: 'conv',\n      op: 'query',\n      convMessage: new ConvCommand(queryJSON),\n    });\n    const resCommand = await this._send(command);\n    return this._handleQueryResults(resCommand);\n  }\n\n  async _handleQueryResults(resCommand) {\n    let conversations;\n    try {\n      conversations = decode(JSON.parse(resCommand.convMessage.results.data));\n    } catch (error) {\n      const commandString = JSON.stringify(trim(resCommand));\n      throw new Error(\n        `Parse query result failed: ${error.message}. Command: ${commandString}`\n      );\n    }\n    conversations = await Promise.all(\n      conversations.map(this._parseConversationFromRawData.bind(this))\n    );\n    return conversations.map(this._upsertConversationToCache.bind(this));\n  }\n\n  _upsertConversationToCache(fetchedConversation) {\n    let conversation = this._conversationCache.get(fetchedConversation.id);\n    if (!conversation) {\n      conversation = fetchedConversation;\n      this._debug('no match, set cache');\n      this._conversationCache.set(fetchedConversation.id, fetchedConversation);\n    } else {\n      this._debug('update cached conversation');\n      [\n        'creator',\n        'createdAt',\n        'updatedAt',\n        'lastMessageAt',\n        'lastMessage',\n        'mutedMembers',\n        'members',\n        '_attributes',\n        'transient',\n        'muted',\n      ].forEach(key => {\n        const value = fetchedConversation[key];\n        if (value !== undefined) conversation[key] = value;\n      });\n      if (conversation._reset) conversation._reset();\n    }\n    return conversation;\n  }\n\n  /**\n   * 反序列化消息，与 {@link Message#toFullJSON} 相对。\n   * @param {Object}\n   * @return {AVMessage} 解析后的消息\n   * @since 4.0.0\n   */\n  async parseMessage({ data, bin = false, ...properties }) {\n    const content = bin ? decodeBase64(data) : data;\n    const message = await this._messageParser.parse(content);\n    Object.assign(message, properties);\n    message._updateMentioned(this.id);\n    return message;\n  }\n\n  /**\n   * 反序列化对话，与 {@link Conversation#toFullJSON} 相对。\n   * @param {Object}\n   * @return {ConversationBase} 解析后的对话\n   * @since 4.0.0\n   */\n  async parseConversation({\n    id,\n    lastMessageAt,\n    lastMessage,\n    lastDeliveredAt,\n    lastReadAt,\n    unreadMessagesCount,\n    members,\n    mentioned,\n    ...properties\n  }) {\n    const conversationData = {\n      id,\n      lastMessageAt,\n      lastMessage,\n      lastDeliveredAt,\n      lastReadAt,\n      unreadMessagesCount,\n      members,\n      mentioned,\n    };\n    if (lastMessage) {\n      conversationData.lastMessage = await this.parseMessage(lastMessage);\n      conversationData.lastMessage._setStatus(MessageStatus.SENT);\n    }\n    const { transient, system, expiredAt } = properties;\n    if (transient) return new ChatRoom(conversationData, properties, this);\n    if (system)\n      return new ServiceConversation(conversationData, properties, this);\n    if (expiredAt || isTemporaryConversatrionId(id)) {\n      return new TemporaryConversation(conversationData, { expiredAt }, this);\n    }\n    return new Conversation(conversationData, properties, this);\n  }\n\n  async _parseConversationFromRawData(rawData) {\n    const data = keyRemap(\n      {\n        objectId: 'id',\n        lm: 'lastMessageAt',\n        m: 'members',\n        tr: 'transient',\n        sys: 'system',\n        c: 'creator',\n        mu: 'mutedMembers',\n      },\n      rawData\n    );\n    if (data.msg) {\n      data.lastMessage = {\n        data: data.msg,\n        bin: data.bin,\n        from: data.msg_from,\n        id: data.msg_mid,\n        timestamp: data.msg_timestamp,\n        updatedAt: data.patch_timestamp,\n      };\n      delete data.lastMessageFrom;\n      delete data.lastMessageId;\n      delete data.lastMessageTimestamp;\n      delete data.lastMessagePatchTimestamp;\n    }\n    const { ttl } = data;\n    if (ttl) data.expiredAt = Date.now() + ttl * 1000;\n    return this.parseConversation(data);\n  }\n\n  /**\n   * 创建一个对话\n   * @param {Object} options 除了下列字段外的其他字段将被视为对话的自定义属性\n   * @param {String[]} options.members 对话的初始成员列表，默认包含当前 client\n   * @param {String} [options.name] 对话的名字\n   * @param {Boolean} [options.unique=false] 唯一对话，当其为 true 时，如果当前已经有相同成员的对话存在则返回该对话，否则会创建新的对话\n   * @return {Promise.<Conversation>}\n   */\n  async createConversation({\n    members: m,\n    name,\n    transient,\n    unique,\n    _tempConv: tempConv,\n    _tempConvTTL: tempConvTTL,\n    ...properties\n  } = {}) {\n    if (!(transient || Array.isArray(m))) {\n      throw new TypeError(`conversation members ${m} is not an array`);\n    }\n    let members = new Set(m);\n    members.add(this.id);\n    members = Array.from(members).sort();\n    let attr = properties || {};\n    if (name) {\n      if (typeof name !== 'string') {\n        throw new TypeError(`conversation name ${name} is not a string`);\n      }\n      attr.name = name;\n    }\n    attr = new JsonObjectMessage({\n      data: JSON.stringify(encode(attr)),\n    });\n\n    const startCommandJson = {\n      m: members,\n      attr,\n      transient,\n      unique,\n      tempConv,\n      tempConvTTL,\n    };\n\n    const command = new GenericCommand({\n      cmd: 'conv',\n      op: 'start',\n      convMessage: new ConvCommand(startCommandJson),\n    });\n\n    if (this.options.conversationSignatureFactory) {\n      const params = [null, this._identity, members, 'create'];\n      const signatureResult = await runSignatureFactory(\n        this.options.conversationSignatureFactory,\n        params\n      );\n      Object.assign(\n        command.convMessage,\n        keyRemap(\n          {\n            signature: 's',\n            timestamp: 't',\n            nonce: 'n',\n          },\n          signatureResult\n        )\n      );\n    }\n\n    const { convMessage: { cid, cdate, tempConvTTL: ttl } } = await this._send(\n      command\n    );\n    const data = {\n      name,\n      transient,\n      unique,\n      id: cid,\n      createdAt: cdate,\n      updatedAt: cdate,\n      lastMessageAt: null,\n      creator: this.id,\n      members: transient ? [] : members,\n      ...properties,\n    };\n    if (ttl) data.expiredAt = Date.now() + ttl * 1000;\n    const conversation = await this.parseConversation(data);\n    return this._upsertConversationToCache(conversation);\n  }\n\n  /**\n   * 创建一个聊天室\n   * @since 4.0.0\n   * @param {Object} options 除了下列字段外的其他字段将被视为对话的自定义属性\n   * @param {String} [options.name] 对话的名字\n   * @return {Promise.<ChatRoom>}\n   */\n  async createChatRoom(param) {\n    return this.createConversation({\n      ...param,\n      transient: true,\n      members: null,\n      unique: false,\n    });\n  }\n\n  /**\n   * 创建一个临时对话\n   * @since 4.0.0\n   * @param {Object} options\n   * @param {String[]} options.members 对话的初始成员列表，默认包含当前 client\n   * @param {String} [options.ttl] 对话存在时间，单位为秒，最大值与默认值均为 86400（一天），过期后该对话不再可用。\n   * @return {Promise.<TemporaryConversation>}\n   */\n  async createTemporaryConversation({ ttl: _tempConvTTL, ...param }) {\n    return this.createConversation({\n      ...param,\n      transient: false,\n      unique: false,\n      _tempConv: true,\n      _tempConvTTL,\n    });\n  }\n\n  // jsdoc-ignore-start\n  @throttle(1000)\n  // jsdoc-ignore-end\n  _doSendRead() {\n    // if not connected, just skip everything\n    if (!this._connection.is('connected')) return;\n    const buffer = internal(this).readConversationsBuffer;\n    const conversations = Array.from(buffer);\n    if (!conversations.length) return;\n    const ids = conversations.map(conversation => {\n      if (!(conversation instanceof ConversationBase)) {\n        throw new TypeError(`${conversation} is not a Conversation`);\n      }\n      return conversation.id;\n    });\n    this._debug(`mark [${ids}] as read`);\n    buffer.clear();\n    this._sendReadCommand(conversations).catch(error => {\n      this._debug('send read failed: %O', error);\n      conversations.forEach(buffer.add.bind(buffer));\n    });\n  }\n  _sendReadCommand(conversations) {\n    return this._send(\n      new GenericCommand({\n        cmd: 'read',\n        readMessage: new ReadCommand({\n          convs: conversations.map(\n            conversation =>\n              new ReadTuple({\n                cid: conversation.id,\n                mid:\n                  conversation.lastMessage &&\n                  conversation.lastMessage.from !== this.id\n                    ? conversation.lastMessage.id\n                    : undefined,\n                timestamp: (conversation.lastMessageAt || new Date()).getTime(),\n              })\n          ),\n        }),\n      }),\n      false\n    );\n  }\n}\n","export {\n  DISCONNECT,\n  RECONNECT,\n  RETRY,\n  SCHEDULE,\n  OFFLINE,\n  ONLINE,\n} from '../websocket-plus';\n\nexport const RECONNECT_ERROR = 'reconnecterror';\n","import { encode as encodeBase64 } from 'base64-arraybuffer';\nimport Message from './message';\n\nexport default class BinaryMessage extends Message {\n  /**\n   * 二进制消息\n   * @extends Message\n   * @param {ArrayBuffer} buffer\n   * @since 4.0.0\n   */\n  constructor(buffer) {\n    if (!(buffer instanceof ArrayBuffer)) {\n      throw new TypeError(`${buffer} is not an ArrayBuffer`);\n    }\n    super(buffer);\n  }\n\n  /**\n   * @type ArrayBuffer\n   */\n  get buffer() {\n    return this.content;\n  }\n  set buffer(buffer) {\n    this.content = buffer;\n  }\n\n  static validate(target) {\n    return target instanceof ArrayBuffer;\n  }\n\n  toJSON() {\n    return {\n      ...super._toJSON(),\n      data: encodeBase64(this.content),\n    };\n  }\n\n  toFullJSON() {\n    return {\n      ...super.toFullJSON(),\n      bin: true,\n      data: encodeBase64(this.content),\n    };\n  }\n}\n","import TypedMessage from './typed-message';\nimport { messageType, IE10Compatible } from './helpers';\n\n// jsdoc-ignore-start\n@messageType(-1)\n@IE10Compatible\n// jsdoc-ignore-end\nexport default class TextMessage extends TypedMessage {\n  /**\n   * 文类类型消息\n   * @extends TypedMessage\n   * @param  {String} [text='']\n   * @throws {TypeError} text 不是 String 类型\n   */\n  constructor(text = '') {\n    if (typeof text !== 'string') {\n      throw new TypeError(`${text} is not a string`);\n    }\n    super();\n    this.setText(text);\n  }\n}\n\n/**\n * @name TYPE\n * @memberof TextMessage\n * @type Number\n * @static\n * @const\n */\n","import d from 'debug';\nimport isPlainObject from 'lodash/isPlainObject';\nimport { applyMiddlewares } from './plugin';\n\nconst debug = d('LC:MessageParser');\n\nconst tryParseJson = (target, key, descriptor) => {\n  const fn = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function wrapper(param) {\n    let content;\n    if (typeof param !== 'string') {\n      content = param;\n    } else {\n      try {\n        content = JSON.parse(param);\n      } catch (error) {\n        content = param;\n      }\n    }\n    return fn.call(this, content);\n  };\n};\n\nconst applyPlugins = (target, key, descriptor) => {\n  const fn = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function wrapper(json) {\n    return Promise.resolve(json)\n      .then(applyMiddlewares(this._plugins.beforeMessageParse))\n      .then(decoratedJson => fn.call(this, decoratedJson))\n      .then(applyMiddlewares(this._plugins.afterMessageParse));\n  };\n};\n\nexport default class MessageParser {\n  constructor(plugins = {}) {\n    this._plugins = plugins;\n    this._messageClasses = [];\n  }\n\n  register(messageClass) {\n    if (\n      messageClass &&\n      messageClass.parse &&\n      messageClass.prototype &&\n      messageClass.prototype.getPayload\n    ) {\n      this._messageClasses.unshift(messageClass);\n    } else {\n      throw new TypeError('Invalid messageClass');\n    }\n  }\n\n  // jsdoc-ignore-start\n  @tryParseJson\n  @applyPlugins\n  // jsdoc-ignore-end\n  parse(content) {\n    debug('parsing message: %O', content);\n    // eslint-disable-next-line no-restricted-syntax\n    for (const Klass of this._messageClasses) {\n      const contentCopy = isPlainObject(content)\n        ? Object.assign({}, content)\n        : content;\n      let valid;\n      let result;\n      try {\n        valid = Klass.validate(contentCopy);\n      } catch (error) {\n        // eslint-disable-line no-empty\n      }\n      if (valid) {\n        try {\n          result = Klass.parse(contentCopy);\n        } catch (error) {\n          console.warn('parsing a valid message content error', {\n            error,\n            Klass,\n            content: contentCopy,\n          });\n        }\n        if (result !== undefined) {\n          debug('parse result: %O', result);\n          return result;\n        }\n      }\n    }\n    throw new Error('No Message Class matched');\n  }\n}\n","/** @module leancloud-realtime */\nimport d from 'debug';\nimport uuid from 'uuid/v4';\nimport IMClient from './im-client';\nimport { RECONNECT, RECONNECT_ERROR } from './events/core';\nimport { Conversation } from './conversations';\nimport { MessageQueryDirection } from './conversations/conversation-base';\nimport Message, { MessageStatus } from './messages/message';\nimport BinaryMessage from './messages/binary-message';\nimport TextMessage from './messages/text-message';\nimport TypedMessage from './messages/typed-message';\nimport RecalledMessage from './messages/recalled-message';\nimport MessageParser from './message-parser';\nimport { trim, internal, ensureArray } from './utils';\n\nconst debug = d('LC:IMPlugin');\n\n/**\n * 消息优先级枚举\n * @enum {Number}\n * @since 3.3.0\n */\nconst MessagePriority = {\n  /** 高 */\n  HIGH: 1,\n  /** 普通 */\n  NORMAL: 2,\n  /** 低 */\n  LOW: 3,\n};\nObject.freeze(MessagePriority);\n\n/**\n * 为 Conversation 定义一个新属性\n * @param {String} prop 属性名\n * @param {Object} [descriptor] 属性的描述符，参见 {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor#Description getOwnPropertyDescriptor#Description - MDN}，默认为该属性名对应的 Conversation 自定义属性的 getter/setter\n * @returns void\n * @example\n *\n * conversation.get('type');\n * conversation.set('type', 1);\n *\n * // equals to\n * defineConversationProperty('type');\n * conversation.type;\n * conversation.type = 1;\n */\nconst defineConversationProperty = (\n  prop,\n  descriptor = {\n    get() {\n      return this.get(prop);\n    },\n    set(value) {\n      this.set(prop, value);\n    },\n  }\n) => {\n  Object.defineProperty(Conversation.prototype, prop, descriptor);\n};\n\nexport {\n  /**\n   * @see Message\n   */\n  Message,\n  /**\n   * @see BinaryMessage\n   */\n  BinaryMessage,\n  /**\n   * @see TypedMessage\n   */\n  TypedMessage,\n  /**\n   * @see TextMessage\n   */\n  TextMessage,\n  /**\n   * @see RecalledMessage\n   */\n  RecalledMessage,\n  MessagePriority,\n  MessageStatus,\n  MessageQueryDirection,\n  defineConversationProperty,\n};\n\nexport {\n  /**\n   * decorator，定义消息类的类型常量\n   * @function\n   * @param {Number} type 自定义类型请使用正整数\n   * @example @messageType(1)\n   * class CustomMessage extends TypedMessage {}\n   *\n   * // 不支持 decorator 的情况下可以这样使用\n   * class CustomMessage extends TypedMessage {\n   *   //...\n   * }\n   * messageType(1)(CustomMessage);\n   */\n  messageType,\n  /**\n   * decorator，定义消息类的自定义字段\n   * @function\n   * @param {String[]} fields 自定义字段\n   * @example @messageField(['foo'])\n   * class CustomMessage extends TypedMessage {\n   *   constructor(foo) {\n   *     super();\n   *     this.foo = foo;\n   *   }\n   * }\n   *\n   * // 不支持 decorator 的情况下可以这样使用\n   * class CustomMessage extends TypedMessage {\n   *   constructor(foo) {\n   *     super();\n   *     this.foo = foo;\n   *   }\n   *   //...\n   * }\n   * messageField(['foo'])(CustomMessage);\n   */\n  messageField,\n  IE10Compatible,\n} from './messages/helpers';\n\nexport { ConversationMemberRole } from './conversation-member-info';\nexport {\n  /**\n   * @see Conversation\n   */\n  Conversation,\n  /**\n   * @see ChatRoom\n   */\n  ChatRoom,\n  /**\n   * @see ServiceConversation\n   */\n  ServiceConversation,\n  /**\n   * @see TemporaryConversation\n   */\n  TemporaryConversation,\n} from './conversations';\n\nconst onRealtimeCreate = realtime => {\n  /* eslint-disable no-param-reassign */\n  const deviceId = uuid();\n  realtime._IMClients = {};\n  realtime._IMClientsCreationCount = 0;\n  const messageParser = new MessageParser(realtime._plugins);\n  realtime._messageParser = messageParser;\n\n  const signAVUser = async user =>\n    realtime._request({\n      method: 'POST',\n      path: '/rtm/sign',\n      data: {\n        session_token: user.getSessionToken(),\n      },\n    });\n\n  /**\n   * 注册消息类\n   *\n   * 在接收消息、查询消息时，会按照消息类注册顺序的逆序依次尝试解析消息内容\n   *\n   * @memberof Realtime\n   * @instance\n   * @param  {Function | Function[]} messageClass 消息类，需要实现 {@link AVMessage} 接口，\n   * 建议继承自 {@link TypedMessage}\n   * @throws {TypeError} 如果 messageClass 没有实现 {@link AVMessage} 接口则抛出异常\n   */\n  const register = messageClass =>\n    ensureArray(messageClass).map(messageParser.register.bind(messageParser));\n  register(ensureArray(realtime._plugins.messageClasses));\n  /**\n   * 创建一个即时通讯客户端，多次创建相同 id 的客户端会返回同一个实例\n   * @memberof Realtime\n   * @instance\n   * @param  {String|AV.User} [identity] 客户端 identity，如果不指定该参数，服务端会随机生成一个字符串作为 identity，\n   * 如果传入一个已登录的 AV.User，则会使用该用户的 id 作为客户端 identity 登录。\n   * @param  {Object} [options]\n   * @param  {Function} [options.signatureFactory] open session 时的签名方法 // TODO need details\n   * @param  {Function} [options.conversationSignatureFactory] 对话创建、增减成员操作时的签名方法\n   * @param  {Function} [options.blacklistSignatureFactory] 黑名单操作时的签名方法\n   * @param  {String} [options.tag] 客户端类型标记，以支持单点登录功能\n   * @param  {String} [options.isReconnect=false] 单点登录时标记该次登录是不是应用启动时自动重新登录\n   * @return {Promise.<IMClient>}\n   */\n  const createIMClient = async (\n    identity,\n    { tag, isReconnect, ...clientOptions } = {},\n    lagecyTag\n  ) => {\n    let id;\n    const buildinOptions = {};\n    if (identity) {\n      if (typeof identity === 'string') {\n        id = identity;\n      } else if (identity.id && identity.getSessionToken) {\n        ({ id } = identity);\n        const sessionToken = identity.getSessionToken();\n        if (!sessionToken) {\n          throw new Error('User must be authenticated');\n        }\n        buildinOptions.signatureFactory = signAVUser;\n      } else {\n        throw new TypeError('Identity must be a String or an AV.User');\n      }\n      if (realtime._IMClients[id] !== undefined) {\n        return realtime._IMClients[id];\n      }\n    }\n    if (lagecyTag) {\n      console.warn(\n        'DEPRECATION createIMClient tag param: Use options.tag instead.'\n      );\n    }\n    const _tag = tag || lagecyTag;\n    const promise = realtime\n      ._open()\n      .then(connection => {\n        const client = new IMClient(\n          id,\n          { ...buildinOptions, ...clientOptions },\n          {\n            _connection: connection,\n            _request: realtime._request.bind(realtime),\n            _messageParser: messageParser,\n            _plugins: realtime._plugins,\n            _identity: identity,\n          }\n        );\n        connection.on(RECONNECT, () =>\n          client\n            ._open(realtime._options.appId, _tag, deviceId, true)\n            /**\n             * 客户端连接恢复正常，该事件通常在 {@link Realtime#event:RECONNECT} 之后发生\n             * @event IMClient#RECONNECT\n             * @see Realtime#event:RECONNECT\n             * @since 3.2.0\n             */\n            /**\n             * 客户端重新登录发生错误（网络连接已恢复，但重新登录错误）\n             * @event IMClient#RECONNECT_ERROR\n             * @since 3.2.0\n             */\n            .then(\n              () => client.emit(RECONNECT),\n              error => client.emit(RECONNECT_ERROR, error)\n            )\n        );\n        internal(client)._eventemitter.on(\n          'beforeclose',\n          () => {\n            delete realtime._IMClients[client.id];\n            if (realtime._firstIMClient === client) {\n              delete realtime._firstIMClient;\n            }\n          },\n          realtime\n        );\n        internal(client)._eventemitter.on(\n          'close',\n          () => {\n            realtime._deregister(client);\n          },\n          realtime\n        );\n        return client\n          ._open(realtime._options.appId, _tag, deviceId, isReconnect)\n          .then(() => {\n            realtime._IMClients[client.id] = client;\n            realtime._IMClientsCreationCount += 1;\n            if (realtime._IMClientsCreationCount === 1) {\n              client._omitPeerId(true);\n              realtime._firstIMClient = client;\n            } else if (\n              realtime._IMClientsCreationCount > 1 &&\n              realtime._firstIMClient\n            ) {\n              realtime._firstIMClient._omitPeerId(false);\n            }\n            realtime._register(client);\n            return client;\n          })\n          .catch(error => {\n            delete realtime._IMClients[client.id];\n            throw error;\n          });\n      })\n      .finally(() => {\n        realtime._deregisterPending(promise);\n      });\n    if (identity) {\n      realtime._IMClients[id] = promise;\n    }\n    realtime._registerPending(promise);\n    return promise;\n  };\n  Object.assign(realtime, {\n    register,\n    createIMClient,\n  });\n  /* eslint-enable no-param-reassign */\n};\n\nconst beforeCommandDispatch = (command, realtime) => {\n  const isIMCommand = command.service === null || command.service === 2;\n  if (!isIMCommand) return true;\n  const targetClient = command.peerId\n    ? realtime._IMClients[command.peerId]\n    : realtime._firstIMClient;\n  if (targetClient) {\n    Promise.resolve(targetClient)\n      .then(client => client._dispatchCommand(command))\n      .catch(debug);\n  } else {\n    debug(\n      '[WARN] Unexpected message received without any live client match: %O',\n      trim(command)\n    );\n  }\n  return false;\n};\n\nexport const IMPlugin = {\n  name: 'leancloud-realtime-plugin-im',\n  onRealtimeCreate,\n  beforeCommandDispatch,\n  messageClasses: [Message, BinaryMessage, RecalledMessage, TextMessage],\n};\n","import { Realtime } from './core';\nimport { IMPlugin, defineConversationProperty } from './plugin-im';\nimport * as CoreEvent from './events/core';\nimport * as IMEvent from './events/im';\n\nRealtime.defineConversationProperty = defineConversationProperty;\nRealtime.__preRegisteredPlugins = [IMPlugin];\n\nconst Event = {\n  ...CoreEvent,\n  ...IMEvent,\n};\n\nexport {\n  /**\n   * SDK 可能会派发的事件枚举\n   * @name Event\n   * @memberof module:leancloud-realtime\n   * @enum {String}\n   * @since 4.0.0\n   */\n  Event,\n};\n\nexport {\n  /**\n   * 错误码，详见 {@link https://leancloud.cn/docs/realtime_v2.html#云端错误码说明}\n   * @name ErrorCode\n   * @memberof module:leancloud-realtime\n   * @enum {Number}\n   * @since 3.3.0\n   */\n  ErrorCode,\n} from './error';\n\nexport * from './core';\n\nexport * from './plugin-im';\n"],"names":["module","require","newBuilder","build","messages","push_server","messages2","JsonObjectMessage","UnreadTuple","LogItem","DataCommand","SessionCommand","ErrorCommand","DirectCommand","AckCommand","UnreadCommand","ConvCommand","RoomCommand","LogsCommand","RcpCommand","ReadTuple","MaxReadTuple","ReadCommand","PresenceCommand","ReportCommand","GenericCommand","BlacklistCommand","PatchCommand","PatchItem","ConvMemberInfo","CommandType","OpType","StatusType","global","window","EXPIRED","debug","d","Expirable","value","ttl","originalValue","expiredAt","Date","now","expired","Cache","name","_map","get","key","cache","set","tryAll","promise","promiseConstructors","length","catch","slice","tap","interceptor","decodeDate","date","__type","iso","toNumber","getTime","undefined","decode","isPlainObject","reduce","result","encode","toJSON","keyRemap","keymap","obj","newObj","newKey","isIE10","navigator","userAgent","indexOf","getStaticProperty","klass","property","__proto__","union","a","b","difference","filter","bSet","has","x","map","internal","object","compact","prop","hasOwnProperty","call","removeNull","trim","JSON","parse","message","ensureArray","Array","isArray","target","setValue","segs","split","lastSeg","pop","currentTarget","forEach","seg","isWeapp","wx","connectSocket","throttle","descriptor","callback","Error","throttleMeta","propertyMeta","previouseTimestamp","timeout","remainingTime","wait","apply","setTimeout","OPEN","DISCONNECT","RECONNECT","RETRY","SCHEDULE","OFFLINE","ONLINE","ERROR","MESSAGE","HEARTBEAT_TIME","TIMEOUT_TIME","DEFAULT_RETRY_STRATEGY","Math","min","attempt","requireConnected","requireConnectedWrapper","checkConnectionAvailability","args","WebSocketPlus","getUrls","protocol","WebSocket","_getUrls","resolve","_protocol","init","_createWs","then","__postponeTimeoutTimer","_postponeTimeoutTimer","bind","addEventListener","__pause","pause","__resume","resume","open","throw","urls","reject","url","ws","binaryType","onopen","onclose","error","onerror","_ws","_handleClose","onmessage","_handleMessage","_destroyWs","close","onbeforeevent","event","from","to","payload","emit","onconnected","_startConnectionKeeper","onleaveconnected","_stopConnectionKeeper","onpause","onbeforeresume","onreconnect","ondisconnected","delay","__scheduledRetry","is","retry","onretry","can","reconnect","fail","removeEventListener","currentState","current","warn","_ping","ping","_clearTimeoutTimers","_timeoutTimer","disconnect","_heartbeatTimer","setInterval","addListener","removeListener","code","reason","isFinished","handleClose","send","data","handleMessage","EventEmitter","StateMachine","create","prototype","ErrorCode","Number","createError","appCode","detail","errorMessage","err","COMMAND_TIMEOUT","Connection","getUrl","format","version","protocolString","encodeURIComponent","_protocalFormat","_commands","_serialId","command","waitingForRespond","i","serialId","enabled","toBase64","toArrayBuffer","TypeError","msg","e","cmd","echo","checkType","constructor","param","middleware","console","_pluginName","applyDecorators","decorators","decorator","applyMiddlewares","middlewares","previousPromise","applyDispatcher","dispatchers","resultPromise","dispatcher","shouldDispatch","debugRequest","routerCache","Realtime","plugins","options","VERSION","appId","appKey","_options","process","env","RTM_SERVER_NAME","_cache","_this","clients","pendingClients","mergedPlugins","__preRegisteredPlugins","plugin","_plugins","hook","concat","onRealtimeCreate","_request","method","path","query","headers","region","_getServerUrls","api","axios","response","status","_open","_openPromise","noBinary","pushOfflineMessages","connection","_getRTMServers","on","_dispatchCommand","isFatal","APP_NOT_AVAILABLE","INVALID_LOGIN","INVALID_ORIGIN","some","errorCode","RTMServers","shuffle","cachedEndPoints","_fetchRTMServers","info","server","secondary","cachedRouter","res","RTMRouter","rtm_router_server","api_server","serverUrls","id","toLowerCase","ssl","RTMServerName","_close","cannot","_registerPending","add","_deregisterPending","client","delete","_register","_deregister","size","beforeCommandDispatch","INVITED","KICKED","MEMBERS_JOINED","MEMBERS_LEFT","MEMBER_INFO_UPDATED","BLOCKED","UNBLOCKED","MEMBERS_BLOCKED","MEMBERS_UNBLOCKED","MUTED","UNMUTED","MEMBERS_MUTED","MEMBERS_UNMUTED","UNREAD_MESSAGES_COUNT_UPDATE","CLOSE","CONFLICT","UNHANDLED_MESSAGE","CONVERSATION_INFO_UPDATED","LAST_DELIVERED_AT_UPDATE","LAST_READ_AT_UPDATE","MESSAGE_RECALL","MESSAGE_UPDATE","INFO_UPDATED","MessageStatus","rMessageStatus","NONE","SENDING","SENT","DELIVERED","READ","FAILED","Message","content","uuid","_setStatus","getPayload","_toJSON","cid","timestamp","deliveredAt","updatedAt","mentionList","mentionedAll","mentioned","toFullJSON","_updatedAt","_status","_updateMentioned","_mentioned","getMentionList","setMentionList","mentionAll","Boolean","validate","json","_timestamp","_deliveredAt","messageType","type","TYPE","_lctype","_getType","messageField","fields","originalCustomFields","_customFields","IE10Compatible","TypedMessage","setText","text","_lctext","getText","setAttributes","attributes","_lcattrs","getAttributes","_getCustomFields","field","summary","customFields","RecalledMessage","serializeMessage","binaryMsg","ArrayBuffer","QueryDirection","NEW","OLD","MessageQueryDirection","ConversationBase","lastMessageAt","lastMessage","lastDeliveredAt","lastReadAt","unreadMessagesCount","members","properties","IMClient","_client","Event","_debug","onConversationCreate","_setUnreadMessagesMentioned","unreadMessagesMentioned","_setLastDeliveredAt","_setLastReadAt","params","_send","convMessage","sendOptions","getSendOptions","transient","receipt","priority","pushData","will","resCommand","ackMessage","uid","t","messagesWaitingForReceipt","_update","newMessage","recall","patch","modify","_lastPatchTime","count","update","queryMessages","beforeTime","beforeMessageId","afterTime","afterMessageId","limit","direction","startTime","startMessageId","startClosed","endTime","endMessageId","endClosed","log","conditions","tt","OLD_TO_NEW","all","logsMessage","logs","msgId","patchTimestamp","ackAt","readAt","mentionPids","bin","parseMessage","messageData","createMessagesIterator","prevMessages","read","readConversationsBuffer","_doSendRead","_handleReceipt","messageId","fetchReceiptTimestamps","maxReadTimestamp","maxAckTimestamp","_fetchAllReceiptTimestamps","maxReadTuples","maxReadTuple","pid","time","_lastMessageAt","ConversationMemberRole","ConversationMemberInfo","conversation","memberId","role","conversationId","isOwner","creator","_validateSignature","signatureResult","signature","nonce","signatureFactory","createPartiallySuccess","allowedPids","failedPids","pids","clientIds","PersistentConversation","createdAt","system","muted","mutedMembers","_reset","currentAttributes","pendingAttributes","pendingKeys","re","RegExp","childKeys","test","k","parentKey","_buildCurrentAttributes","cloneDeep","_attributes","_updateServerAttributes","save","isEmpty","attr","udate","fetch","getQuery","equalTo","find","mute","unmute","_appendConversationSignature","action","conversationSignatureFactory","sort","runSignatureFactory","_appendBlacklistSignature","blacklistSignatureFactory","blacklistMessage","remove","join","failures","quit","muteMembers","add_shutup","unmuteMembers","remove_shutup","queryMutedMembers","next","query_shutup","m","newNext","blockMembers","block","unblockMembers","unblock","queryBlockedMembers","blockedPids","getAllMemberInfo","_requestWithSessionToken","results","clientId","memberInfo","MEMBER","memberInfoMap","getMemberInfo","updateMemberRole","member_info_update","memberInfos","_createdAt","Conversation","ChatRoom","ServiceConversation","subscribe","unsubscribe","transformNotFoundError","CONVERSATION_NOT_FOUND","CONVERSATION_EXPIRED","TemporaryConversation","_expiredAt","ConversationQuery","_encode","source","_quote","s","replace","_calculateFlag","prev","_where","_extraOptions","_addCondition","condition","_skip","skip","_limit","_order","containsMembers","peerIds","containsAll","withMembers","includeSelf","peerIdsSet","sizeEqualTo","lessThan","lessThanOrEqualTo","greaterThan","greaterThanOrEqualTo","notEqualTo","exists","doesNotExist","containedIn","values","notContainsIn","contains","subString","startsWith","prefix","endsWith","suffix","matches","regex","_modifiers","ignoreCase","multiline","ascending","addAscending","descending","addDescending","withLastMessagesRefreshed","_executeQuery","SessionManager","refresh","onBeforeGetSessionToken","_onBeforeGetSessionToken","setSessionToken","token","sessionToken","_sessionToken","_pendingSessionTokenPromise","setSessionTokenAsync","currentSessionToken","getSessionToken","autoRefresh","newValue","revoke","isTemporaryConversatrionId","configBitmap","props","_messageParser","_conversationCache","_ackMessageBuffer","lastPatchTime","lastNotificationTime","_eventemitter","onIMClientCreate","serverTs","conv","direct","session","unread","rcp","_dispatchConvMessage","_dispatchDirectMessage","_dispatchSessionMessage","_dispatchUnreadMessage","_dispatchRcpMessage","_dispatchPatchMessage","sessionMessage","op","closed","SESSION_CONFLICT","unreadMessage","convs","notifTime","lastUnreadNotifTime","getConversations","mid","ts","messageProps","countNotUpdated","conversations","rcpMessage","patches","patchMessage","patchTime","initBy","getConversation","joined","left","members_joined","members_left","members_blocked","members_unblocked","blocked","unblocked","members_shutuped","members_unshutuped","shutuped","unshutuped","member_info_changed","updated","originalMessage","directMessage","fromPeerId","_sendAck","_dispatchParsedMessage","beforeMessageDispatch","push","_doSendAck","_connection","convAckMessages","timestamps","max","_omitPeerId","peerIdOmittable","peerId","tag","deviceId","isReconnect","_identity","_sessionManager","SESSION_TOKEN_EXPIRED","st","tokenTTL","stTtl","_createSessionManager","_syncNotifications","_fetchNotifications","hasMore","notifications","notification","manager","expiredSessionToken","onlineSessionPeerIds","noCache","cachedConversation","_getTemporaryConversations","ids","remoteConversationIds","remoteTemporaryConversationIds","remoteTemporaryConversationsPromise","_handleQueryResults","getChatRoomQuery","getServiceConversationQuery","where","queryJSON","commandString","_parseConversationFromRawData","_upsertConversationToCache","fetchedConversation","decodeBase64","parseConversation","conversationData","rawData","msg_from","msg_mid","msg_timestamp","patch_timestamp","lastMessageFrom","lastMessageId","lastMessageTimestamp","lastMessagePatchTimestamp","createConversation","unique","tempConv","_tempConv","tempConvTTL","_tempConvTTL","startCommandJson","cdate","createChatRoom","createTemporaryConversation","buffer","clear","_sendReadCommand","RECONNECT_ERROR","BinaryMessage","encodeBase64","TextMessage","tryParseJson","fn","wrapper","applyPlugins","beforeMessageParse","decoratedJson","afterMessageParse","MessageParser","_messageClasses","register","messageClass","unshift","Klass","contentCopy","valid","MessagePriority","defineConversationProperty","_IMClients","_IMClientsCreationCount","messageParser","realtime","signAVUser","user","messageClasses","createIMClient","identity","clientOptions","lagecyTag","buildinOptions","_tag","_firstIMClient","finally","isIMCommand","service","targetClient","IMPlugin","CoreEvent","IMEvent"],"mappings":"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"}